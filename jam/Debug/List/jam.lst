
AVRASM ver. 2.1.30  E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm Mon Mar 06 20:12:43 2023

E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1420): warning: Register r3 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1421): warning: Register r4 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1422): warning: Register r5 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1423): warning: Register r6 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1424): warning: Register r7 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1425): warning: Register r8 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1426): warning: Register r9 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1427): warning: Register r10 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1428): warning: Register r11 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1429): warning: Register r12 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1430): warning: Register r13 already defined by the .DEF directive
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1431): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.50 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _mode=R3
                 	.DEF _mode_msb=R4
                 	.DEF _seconds_jam=R5
                 	.DEF _seconds_jam_msb=R6
                 	.DEF _minutes_jam=R7
                 	.DEF _minutes_jam_msb=R8
                 	.DEF _seconds_timer=R9
                 	.DEF _seconds_timer_msb=R10
                 	.DEF _minutes_timer=R11
                 	.DEF _minutes_timer_msb=R12
                 	.DEF _seconds_stopwatch=R13
                 	.DEF _seconds_stopwatch_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 01d4 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 01fa 	JMP  _timera_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0289 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000
000039 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0xA2:
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1477): warning: .cseg .db misalignment - padding zero byte
00003a 0001      	.DB  0x1
                 _0xA3:
E:\Projects\Tugas Sekolah\Ganesha\#6\Sistem Mikroprosesor\Jam-Digital-Codevision-AVR-main\jam\Debug\List\jam.asm(1479): warning: .cseg .db misalignment - padding zero byte
00003b 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
00003c 000c      	.DW  0x0C
00003d 0003      	.DW  0x03
00003e 0068      	.DW  __REG_VARS*2
                 
00003f 0001      	.DW  0x01
000040 030c      	.DW  _atur
000041 0074      	.DW  _0xA2*2
                 
000042 0001      	.DW  0x01
000043 030e      	.DW  _geser
000044 0076      	.DW  _0xA3*2
                 
                 _0xFFFFFFFF:
000045 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bff5      	OUT  MCUCR,R31
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e0a0      	LDI  R26,LOW(__SRAM_START)
000055 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006b e0e0      	LDI  R30,__GPIOR0_INIT
00006c bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 0307 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void init_int1(void)
                 ; 0000 0019 {                        // 1s
                 
                 	.CSEG
                 _init_int1:
                 ; .FSTART _init_int1
                 ; 0000 001A TCCR1A = (1 << WGM12); // ctc
000075 e0e8      	LDI  R30,LOW(8)
000076 93e0 0080 	STS  128,R30
                 ; 0000 001B TCCR1B = (1 << CS12);  // 256
000078 e0e4      	LDI  R30,LOW(4)
000079 93e0 0081 	STS  129,R30
                 ; 0000 001C TCNT1H = 0;
00007b e0e0      	LDI  R30,LOW(0)
00007c 93e0 0085 	STS  133,R30
                 ; 0000 001D TCNT1L = 0;
00007e 93e0 0084 	STS  132,R30
                 ; 0000 001E OCR1AH = 0xF4;
000080 efe4      	LDI  R30,LOW(244)
000081 93e0 0089 	STS  137,R30
                 ; 0000 001F OCR1AL = 0x24;
000083 e2e4      	LDI  R30,LOW(36)
000084 93e0 0088 	STS  136,R30
                 ; 0000 0020 TIMSK1 = 0b00000010;
000086 e0e2      	LDI  R30,LOW(2)
000087 93e0 006f 	STS  111,R30
                 ; 0000 0021 }
000089 9508      	RET
                 ; .FEND
                 ;void init_int2(void)
                 ; 0000 0024 { // 1ms
                 _init_int2:
                 ; .FSTART _init_int2
                 ; 0000 0025 TIMSK0 = 0b00000001;
00008a e0e1      	LDI  R30,LOW(1)
00008b 93e0 006e 	STS  110,R30
                 ; 0000 0026 TCCR0B = (1 << CS02); // 256
00008d e0e4      	LDI  R30,LOW(4)
00008e bde5      	OUT  0x25,R30
                 ; 0000 0027 TCNT0 = 0x83;
00008f e8e3      	LDI  R30,LOW(131)
000090 bde6      	OUT  0x26,R30
                 ; 0000 0028 }
000091 9508      	RET
                 ; .FEND
                 ;void init_buttonA(void)
                 ; 0000 002B {
                 _init_buttonA:
                 ; .FSTART _init_buttonA
                 ; 0000 002C // SET FALLING EDGE PADA INT1
                 ; 0000 002D EICRA = (1 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
000092 e0e8      	LDI  R30,LOW(8)
000093 93e0 0069 	STS  105,R30
                 ; 0000 002E // ENABLE INT1
                 ; 0000 002F EIMSK = (1 << INT1) | (0 << INT0);
000095 e0e2      	LDI  R30,LOW(2)
000096 bbed      	OUT  0x1D,R30
                 ; 0000 0030 }
000097 9508      	RET
                 ; .FEND
                 ;void SevenSegment(int num)
                 ; 0000 0034 {
                 _SevenSegment:
                 ; .FSTART _SevenSegment
                 ; 0000 0035 // Elif for number modifier Seven Segments
                 ; 0000 0036 if (num == 0)
000098 931a      	ST   -Y,R17
000099 930a      	ST   -Y,R16
00009a 018d      	MOVW R16,R26
                 ;	num -> R16,R17
00009b 2e00      	MOV  R0,R16
00009c 2a01      	OR   R0,R17
00009d f429      	BRNE _0x3
                 ; 0000 0037 {
                 ; 0000 0038 SEG_A = 0;
00009e d296      	RCALL SUBOPT_0x0
                 ; 0000 0039 SEG_B = 0;
                 ; 0000 003A SEG_C = 0;
                 ; 0000 003B SEG_D = 0;
                 ; 0000 003C SEG_E = 0;
00009f 9841      	CBI  0x8,1
                 ; 0000 003D SEG_F = 0;
0000a0 985c      	CBI  0xB,4
                 ; 0000 003E SEG_G = 1;
0000a1 9a40      	SBI  0x8,0
                 ; 0000 003F }
                 ; 0000 0040 else if (num == 1)
0000a2 c05a      	RJMP _0x12
                 _0x3:
0000a3 e0e1      	LDI  R30,LOW(1)
0000a4 e0f0      	LDI  R31,HIGH(1)
0000a5 17e0      	CP   R30,R16
0000a6 07f1      	CPC  R31,R17
0000a7 f429      	BRNE _0x13
                 ; 0000 0041 {
                 ; 0000 0042 SEG_A = 1;
0000a8 d291      	RCALL SUBOPT_0x1
                 ; 0000 0043 SEG_B = 0;
                 ; 0000 0044 SEG_C = 0;
                 ; 0000 0045 SEG_D = 1;
                 ; 0000 0046 SEG_E = 1;
0000a9 9a41      	SBI  0x8,1
                 ; 0000 0047 SEG_F = 1;
0000aa 9a5c      	SBI  0xB,4
                 ; 0000 0048 SEG_G = 1;
0000ab 9a40      	SBI  0x8,0
                 ; 0000 0049 }
                 ; 0000 004A else if (num == 2)
0000ac c050      	RJMP _0x22
                 _0x13:
0000ad e0e2      	LDI  R30,LOW(2)
0000ae e0f0      	LDI  R31,HIGH(2)
0000af 17e0      	CP   R30,R16
0000b0 07f1      	CPC  R31,R17
0000b1 f439      	BRNE _0x23
                 ; 0000 004B {
                 ; 0000 004C SEG_A = 0;
0000b2 9828      	CBI  0x5,0
                 ; 0000 004D SEG_B = 0;
0000b3 985e      	CBI  0xB,6
                 ; 0000 004E SEG_C = 1;
0000b4 9a5f      	SBI  0xB,7
                 ; 0000 004F SEG_D = 0;
0000b5 9829      	CBI  0x5,1
                 ; 0000 0050 SEG_E = 0;
0000b6 9841      	CBI  0x8,1
                 ; 0000 0051 SEG_F = 1;
0000b7 9a5c      	SBI  0xB,4
                 ; 0000 0052 SEG_G = 0;
0000b8 c043      	RJMP _0x176
                 ; 0000 0053 }
                 ; 0000 0054 else if (num == 3)
                 _0x23:
0000b9 e0e3      	LDI  R30,LOW(3)
0000ba e0f0      	LDI  R31,HIGH(3)
0000bb 17e0      	CP   R30,R16
0000bc 07f1      	CPC  R31,R17
0000bd f421      	BRNE _0x33
                 ; 0000 0055 {
                 ; 0000 0056 SEG_A = 0;
0000be d276      	RCALL SUBOPT_0x0
                 ; 0000 0057 SEG_B = 0;
                 ; 0000 0058 SEG_C = 0;
                 ; 0000 0059 SEG_D = 0;
                 ; 0000 005A SEG_E = 1;
0000bf 9a41      	SBI  0x8,1
                 ; 0000 005B SEG_F = 1;
0000c0 9a5c      	SBI  0xB,4
                 ; 0000 005C SEG_G = 0;
0000c1 c03a      	RJMP _0x176
                 ; 0000 005D }
                 ; 0000 005E else if (num == 4)
                 _0x33:
0000c2 e0e4      	LDI  R30,LOW(4)
0000c3 e0f0      	LDI  R31,HIGH(4)
0000c4 17e0      	CP   R30,R16
0000c5 07f1      	CPC  R31,R17
0000c6 f411      	BRNE _0x43
                 ; 0000 005F {
                 ; 0000 0060 SEG_A = 1;
0000c7 d272      	RCALL SUBOPT_0x1
                 ; 0000 0061 SEG_B = 0;
                 ; 0000 0062 SEG_C = 0;
                 ; 0000 0063 SEG_D = 1;
                 ; 0000 0064 SEG_E = 1;
0000c8 c031      	RJMP _0x177
                 ; 0000 0065 SEG_F = 0;
                 ; 0000 0066 SEG_G = 0;
                 ; 0000 0067 }
                 ; 0000 0068 else if (num == 5)
                 _0x43:
0000c9 e0e5      	LDI  R30,LOW(5)
0000ca e0f0      	LDI  R31,HIGH(5)
0000cb 17e0      	CP   R30,R16
0000cc 07f1      	CPC  R31,R17
0000cd f419      	BRNE _0x53
                 ; 0000 0069 {
                 ; 0000 006A SEG_A = 0;
0000ce 9828      	CBI  0x5,0
                 ; 0000 006B SEG_B = 1;
0000cf 9a5e      	SBI  0xB,6
                 ; 0000 006C SEG_C = 0;
0000d0 c027      	RJMP _0x178
                 ; 0000 006D SEG_D = 0;
                 ; 0000 006E SEG_E = 1;
                 ; 0000 006F SEG_F = 0;
                 ; 0000 0070 SEG_G = 0;
                 ; 0000 0071 }
                 ; 0000 0072 else if (num == 6)
                 _0x53:
0000d1 e0e6      	LDI  R30,LOW(6)
0000d2 e0f0      	LDI  R31,HIGH(6)
0000d3 17e0      	CP   R30,R16
0000d4 07f1      	CPC  R31,R17
0000d5 f431      	BRNE _0x63
                 ; 0000 0073 {
                 ; 0000 0074 SEG_A = 0;
0000d6 9828      	CBI  0x5,0
                 ; 0000 0075 SEG_B = 1;
0000d7 9a5e      	SBI  0xB,6
                 ; 0000 0076 SEG_C = 0;
0000d8 985f      	CBI  0xB,7
                 ; 0000 0077 SEG_D = 0;
0000d9 9829      	CBI  0x5,1
                 ; 0000 0078 SEG_E = 0;
0000da 9841      	CBI  0x8,1
                 ; 0000 0079 SEG_F = 0;
0000db c01f      	RJMP _0x179
                 ; 0000 007A SEG_G = 0;
                 ; 0000 007B }
                 ; 0000 007C else if (num == 7)
                 _0x63:
0000dc e0e7      	LDI  R30,LOW(7)
0000dd e0f0      	LDI  R31,HIGH(7)
0000de 17e0      	CP   R30,R16
0000df 07f1      	CPC  R31,R17
0000e0 f441      	BRNE _0x73
                 ; 0000 007D {
                 ; 0000 007E SEG_A = 0;
0000e1 9828      	CBI  0x5,0
                 ; 0000 007F SEG_B = 0;
0000e2 985e      	CBI  0xB,6
                 ; 0000 0080 SEG_C = 0;
0000e3 985f      	CBI  0xB,7
                 ; 0000 0081 SEG_D = 1;
0000e4 9a29      	SBI  0x5,1
                 ; 0000 0082 SEG_E = 1;
0000e5 9a41      	SBI  0x8,1
                 ; 0000 0083 SEG_F = 1;
0000e6 9a5c      	SBI  0xB,4
                 ; 0000 0084 SEG_G = 1;
0000e7 9a40      	SBI  0x8,0
                 ; 0000 0085 }
                 ; 0000 0086 else if (num == 8)
0000e8 c014      	RJMP _0x82
                 _0x73:
0000e9 e0e8      	LDI  R30,LOW(8)
0000ea e0f0      	LDI  R31,HIGH(8)
0000eb 17e0      	CP   R30,R16
0000ec 07f1      	CPC  R31,R17
0000ed f419      	BRNE _0x83
                 ; 0000 0087 {
                 ; 0000 0088 SEG_A = 0;
0000ee d246      	RCALL SUBOPT_0x0
                 ; 0000 0089 SEG_B = 0;
                 ; 0000 008A SEG_C = 0;
                 ; 0000 008B SEG_D = 0;
                 ; 0000 008C SEG_E = 0;
0000ef 9841      	CBI  0x8,1
                 ; 0000 008D SEG_F = 0;
0000f0 c00a      	RJMP _0x179
                 ; 0000 008E SEG_G = 0;
                 ; 0000 008F }
                 ; 0000 0090 else if (num == 9)
                 _0x83:
0000f1 e0e9      	LDI  R30,LOW(9)
0000f2 e0f0      	LDI  R31,HIGH(9)
0000f3 17e0      	CP   R30,R16
0000f4 07f1      	CPC  R31,R17
0000f5 f439      	BRNE _0x93
                 ; 0000 0091 {
                 ; 0000 0092 SEG_A = 0;
0000f6 9828      	CBI  0x5,0
                 ; 0000 0093 SEG_B = 0;
0000f7 985e      	CBI  0xB,6
                 ; 0000 0094 SEG_C = 0;
                 _0x178:
0000f8 985f      	CBI  0xB,7
                 ; 0000 0095 SEG_D = 0;
0000f9 9829      	CBI  0x5,1
                 ; 0000 0096 SEG_E = 1;
                 _0x177:
0000fa 9a41      	SBI  0x8,1
                 ; 0000 0097 SEG_F = 0;
                 _0x179:
0000fb 985c      	CBI  0xB,4
                 ; 0000 0098 SEG_G = 0;
                 _0x176:
0000fc 9840      	CBI  0x8,0
                 ; 0000 0099 }
                 ; 0000 009A }
                 _0x93:
                 _0x82:
                 _0x22:
                 _0x12:
0000fd 9109      	LD   R16,Y+
0000fe 9119      	LD   R17,Y+
0000ff 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 ;void aturJam(void)
                 ; 0000 00AD {
                 
                 	.CSEG
                 _aturJam:
                 ; .FSTART _aturJam
                 ; 0000 00AE #asm("sei")
000100 9478      	SEI
                 ; 0000 00AF atur = 0;
000101 e0e0      	LDI  R30,LOW(0)
000102 93e0 030c 	STS  _atur,R30
000104 93e0 030d 	STS  _atur+1,R30
                 ; 0000 00B0 TIMSK1 &= ~(1 << OCIE1A);
000106 d238      	RCALL SUBOPT_0x2
                 ; 0000 00B1 while (!(EIFR & (1 << INTF1)))
                 _0xA4:
000107 99e1      	SBIC 0x1C,1
000108 c051      	RJMP _0xA6
                 ; 0000 00B2 { // menunggu sampai interrupt ditekan
                 ; 0000 00B3 if (BUTTON_D == 1)
000109 9b33      	SBIS 0x6,3
00010a c013      	RJMP _0xA7
                 ; 0000 00B4 {
                 ; 0000 00B5 delay_ms(300);
00010b d239      	RCALL SUBOPT_0x3
                 ; 0000 00B6 if (geser == 0)
00010c f459      	BRNE _0xA8
                 ; 0000 00B7 {
                 ; 0000 00B8 seconds_jam++;
                +
00010d 2de5     +MOV R30 , R5
00010e 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
00010f 9631      	ADIW R30,1
                +
000110 2e5e     +MOV R5 , R30
000111 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
000112 9731      	SBIW R30,1
                 ; 0000 00B9 if (seconds_jam >= 60)
000113 d23a      	RCALL SUBOPT_0x4
000114 f014      	BRLT _0xA9
                 ; 0000 00BA {
                 ; 0000 00BB seconds_jam = 0;
000115 2455      	CLR  R5
000116 2466      	CLR  R6
                 ; 0000 00BC }
                 ; 0000 00BD }
                 _0xA9:
                 ; 0000 00BE else
000117 c005      	RJMP _0xAA
                 _0xA8:
                 ; 0000 00BF {
                 ; 0000 00C0 minutes_jam++;
000118 d23a      	RCALL SUBOPT_0x5
                 ; 0000 00C1 if (minutes_jam >= 60)
000119 d23e      	RCALL SUBOPT_0x6
00011a f014      	BRLT _0xAB
                 ; 0000 00C2 {
                 ; 0000 00C3 minutes_jam = 0;
00011b 2477      	CLR  R7
00011c 2488      	CLR  R8
                 ; 0000 00C4 }
                 ; 0000 00C5 }
                 _0xAB:
                 _0xAA:
                 ; 0000 00C6 }
                 ; 0000 00C7 else if (BUTTON_C == 1)
00011d c033      	RJMP _0xAC
                 _0xA7:
00011e 9b34      	SBIS 0x6,4
00011f c021      	RJMP _0xAD
                 ; 0000 00C8 {
                 ; 0000 00C9 delay_ms(300);
000120 d224      	RCALL SUBOPT_0x3
                 ; 0000 00CA if (geser == 0)
000121 f481      	BRNE _0xAE
                 ; 0000 00CB {
                 ; 0000 00CC seconds_jam--;
                +
000122 2de5     +MOV R30 , R5
000123 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000124 9731      	SBIW R30,1
                +
000125 2e5e     +MOV R5 , R30
000126 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
000127 9631      	ADIW R30,1
                 ; 0000 00CD if (seconds_jam <= -1)
000128 efef      	LDI  R30,LOW(65535)
000129 efff      	LDI  R31,HIGH(65535)
00012a 15e5      	CP   R30,R5
00012b 05f6      	CPC  R31,R6
00012c f024      	BRLT _0xAF
                 ; 0000 00CE {
                 ; 0000 00CF seconds_jam = 59;
00012d e3eb      	LDI  R30,LOW(59)
00012e e0f0      	LDI  R31,HIGH(59)
                +
00012f 2e5e     +MOV R5 , R30
000130 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 00D0 }
                 ; 0000 00D1 }
                 _0xAF:
                 ; 0000 00D2 else
000131 c00e      	RJMP _0xB0
                 _0xAE:
                 ; 0000 00D3 {
                 ; 0000 00D4 minutes_jam--;
                +
000132 2de7     +MOV R30 , R7
000133 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000134 9731      	SBIW R30,1
                +
000135 2e7e     +MOV R7 , R30
000136 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00D5 if (minutes_jam <= -1)
000137 efef      	LDI  R30,LOW(65535)
000138 efff      	LDI  R31,HIGH(65535)
000139 15e7      	CP   R30,R7
00013a 05f8      	CPC  R31,R8
00013b f024      	BRLT _0xB1
                 ; 0000 00D6 {
                 ; 0000 00D7 minutes_jam = 59;
00013c e3eb      	LDI  R30,LOW(59)
00013d e0f0      	LDI  R31,HIGH(59)
                +
00013e 2e7e     +MOV R7 , R30
00013f 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00D8 }
                 ; 0000 00D9 }
                 _0xB1:
                 _0xB0:
                 ; 0000 00DA }
                 ; 0000 00DB else if (BUTTON_B == 1)
000140 c010      	RJMP _0xB2
                 _0xAD:
000141 9b35      	SBIS 0x6,5
000142 c00e      	RJMP _0xB3
                 ; 0000 00DC {
                 ; 0000 00DD delay_ms(300);
000143 d201      	RCALL SUBOPT_0x3
                 ; 0000 00DE if (geser == 0)
000144 f439      	BRNE _0xB4
                 ; 0000 00DF {
                 ; 0000 00E0 geser = 1;
000145 e0e1      	LDI  R30,LOW(1)
000146 e0f0      	LDI  R31,HIGH(1)
000147 93e0 030e 	STS  _geser,R30
000149 93f0 030f 	STS  _geser+1,R31
                 ; 0000 00E1 }
                 ; 0000 00E2 else
00014b c005      	RJMP _0xB5
                 _0xB4:
                 ; 0000 00E3 {
                 ; 0000 00E4 geser = 0;
00014c e0e0      	LDI  R30,LOW(0)
00014d 93e0 030e 	STS  _geser,R30
00014f 93e0 030f 	STS  _geser+1,R30
                 ; 0000 00E5 }
                 _0xB5:
                 ; 0000 00E6 }
                 ; 0000 00E7 // Update Digit Values
                 ; 0000 00E8 digits[0] = minutes_jam / 10;
                 _0xB3:
                 _0xB2:
                 _0xAC:
000151 d20b      	RCALL SUBOPT_0x7
000152 d20f      	RCALL SUBOPT_0x8
                 ; 0000 00E9 digits[1] = minutes_jam % 10;
000153 d209      	RCALL SUBOPT_0x7
000154 d213      	RCALL SUBOPT_0x9
                 ; 0000 00EA digits[2] = seconds_jam / 10;
000155 d218      	RCALL SUBOPT_0xA
000156 d21c      	RCALL SUBOPT_0xB
                 ; 0000 00EB digits[3] = seconds_jam % 10;
000157 d216      	RCALL SUBOPT_0xA
000158 d220      	RCALL SUBOPT_0xC
                 ; 0000 00EC }
000159 cfad      	RJMP _0xA4
                 _0xA6:
                 ; 0000 00ED atur = 1;
00015a d224      	RCALL SUBOPT_0xD
                 ; 0000 00EE // Clear the external interrupt flag
                 ; 0000 00EF EIFR &= (0 << INTF1);
00015b c074      	RJMP _0x2000001
                 ; 0000 00F0 
                 ; 0000 00F1 // Return from function
                 ; 0000 00F2 return;
                 ; 0000 00F3 }
                 ; .FEND
                 ;void stopWatch(void)
                 ; 0000 00F6 {
                 _stopWatch:
                 ; .FSTART _stopWatch
                 ; 0000 00F7 #asm("sei")
00015c 9478      	SEI
                 ; 0000 00F8 seconds_stopwatch = 0;
00015d d228      	RCALL SUBOPT_0xE
                 ; 0000 00F9 minutes_stopwatch = 0;
                 ; 0000 00FA TIMSK1 &= ~(1 << OCIE1A);
00015e d1e0      	RCALL SUBOPT_0x2
                 ; 0000 00FB 
                 ; 0000 00FC while (!(EIFR & (1 << INTF1)))
                 _0xB6:
00015f 99e1      	SBIC 0x1C,1
000160 c015      	RJMP _0xB8
                 ; 0000 00FD {                    // menunggu sampai interrupt ditekan
                 ; 0000 00FE if (BUTTON_D == 1) // start
000161 9b33      	SBIS 0x6,3
000162 c002      	RJMP _0xB9
                 ; 0000 00FF {
                 ; 0000 0100 delay_ms(300);
000163 d22a      	RCALL SUBOPT_0xF
                 ; 0000 0101 TIMSK1 |= (1 << OCIE1A);
                 ; 0000 0102 }
                 ; 0000 0103 else if (BUTTON_C == 1) // pause
000164 c008      	RJMP _0xBA
                 _0xB9:
000165 9b34      	SBIS 0x6,4
000166 c002      	RJMP _0xBB
                 ; 0000 0104 {
                 ; 0000 0105 delay_ms(300);
000167 d22f      	RCALL SUBOPT_0x10
                 ; 0000 0106 TIMSK1 &= ~(1 << OCIE1A);
                 ; 0000 0107 }
                 ; 0000 0108 else if (BUTTON_B == 1)
000168 c004      	RJMP _0xBC
                 _0xBB:
000169 9b35      	SBIS 0x6,5
00016a c002      	RJMP _0xBD
                 ; 0000 0109 { // pause and reset
                 ; 0000 010A delay_ms(300);
00016b d22b      	RCALL SUBOPT_0x10
                 ; 0000 010B TIMSK1 &= ~(1 << OCIE1A);
                 ; 0000 010C seconds_stopwatch = 0;
00016c d219      	RCALL SUBOPT_0xE
                 ; 0000 010D minutes_stopwatch = 0;
                 ; 0000 010E }
                 ; 0000 010F // Update Digit Values
                 ; 0000 0110 digits[0] = minutes_stopwatch / 10;
                 _0xBD:
                 _0xBC:
                 _0xBA:
00016d d22d      	RCALL SUBOPT_0x11
00016e d1f3      	RCALL SUBOPT_0x8
                 ; 0000 0111 digits[1] = minutes_stopwatch % 10;
00016f d22b      	RCALL SUBOPT_0x11
000170 d1f7      	RCALL SUBOPT_0x9
                 ; 0000 0112 digits[2] = seconds_stopwatch / 10;
000171 d230      	RCALL SUBOPT_0x12
000172 d200      	RCALL SUBOPT_0xB
                 ; 0000 0113 digits[3] = seconds_stopwatch % 10;
000173 d22e      	RCALL SUBOPT_0x12
000174 d204      	RCALL SUBOPT_0xC
                 ; 0000 0114 }
000175 cfe9      	RJMP _0xB6
                 _0xB8:
                 ; 0000 0115 
                 ; 0000 0116 // Clear the external interrupt flag
                 ; 0000 0117 EIFR &= (0 << INTF1);
000176 c059      	RJMP _0x2000001
                 ; 0000 0118 
                 ; 0000 0119 // Return from function
                 ; 0000 011A return;
                 ; 0000 011B }
                 ; .FEND
                 ;void alarmTimer(void)
                 ; 0000 011F {
                 _alarmTimer:
                 ; .FSTART _alarmTimer
                 ; 0000 0120 #asm("sei")
000177 9478      	SEI
                 ; 0000 0121 start = 0;
000178 e0e0      	LDI  R30,LOW(0)
000179 93e0 0310 	STS  _start,R30
00017b 93e0 0311 	STS  _start+1,R30
                 ; 0000 0122 TIMSK1 &= ~(1 << OCIE1A);
00017d d1c1      	RCALL SUBOPT_0x2
                 ; 0000 0123 seconds_timer = 0;
00017e 2499      	CLR  R9
00017f 24aa      	CLR  R10
                 ; 0000 0124 minutes_timer = 0;
000180 24bb      	CLR  R11
000181 24cc      	CLR  R12
                 ; 0000 0125 while (!(EIFR & (1 << INTF1)))
                 _0xBE:
000182 99e1      	SBIC 0x1C,1
000183 c048      	RJMP _0xC0
                 ; 0000 0126 { // menunggu sampai interrupt ditekan
                 ; 0000 0127 if (BUTTON_D == 1)
000184 9b33      	SBIS 0x6,3
000185 c011      	RJMP _0xC1
                 ; 0000 0128 {
                 ; 0000 0129 delay_ms(300);
000186 e2ac      	LDI  R26,LOW(300)
000187 e0b1      	LDI  R27,HIGH(300)
000188 d2ba      	RCALL _delay_ms
                 ; 0000 012A seconds_timer++;
                +
000189 2de9     +MOV R30 , R9
00018a 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
00018b 9631      	ADIW R30,1
                +
00018c 2e9e     +MOV R9 , R30
00018d 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
00018e 9731      	SBIW R30,1
                 ; 0000 012B if (seconds_timer >= 60)
00018f e3ec      	LDI  R30,LOW(60)
000190 e0f0      	LDI  R31,HIGH(60)
000191 169e      	CP   R9,R30
000192 06af      	CPC  R10,R31
000193 f014      	BRLT _0xC2
                 ; 0000 012C {
                 ; 0000 012D seconds_timer = 0;
000194 2499      	CLR  R9
000195 24aa      	CLR  R10
                 ; 0000 012E }
                 ; 0000 012F }
                 _0xC2:
                 ; 0000 0130 else if (BUTTON_C == 1)
000196 c01c      	RJMP _0xC3
                 _0xC1:
000197 9b34      	SBIS 0x6,4
000198 c011      	RJMP _0xC4
                 ; 0000 0131 {
                 ; 0000 0132 delay_ms(300);
000199 e2ac      	LDI  R26,LOW(300)
00019a e0b1      	LDI  R27,HIGH(300)
00019b d2a7      	RCALL _delay_ms
                 ; 0000 0133 minutes_timer++;
                +
00019c 2deb     +MOV R30 , R11
00019d 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
00019e 9631      	ADIW R30,1
                +
00019f 2ebe     +MOV R11 , R30
0001a0 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
0001a1 9731      	SBIW R30,1
                 ; 0000 0134 if (minutes_timer >= 60)
0001a2 e3ec      	LDI  R30,LOW(60)
0001a3 e0f0      	LDI  R31,HIGH(60)
0001a4 16be      	CP   R11,R30
0001a5 06cf      	CPC  R12,R31
0001a6 f014      	BRLT _0xC5
                 ; 0000 0135 {
                 ; 0000 0136 minutes_timer = 0;
0001a7 24bb      	CLR  R11
0001a8 24cc      	CLR  R12
                 ; 0000 0137 }
                 ; 0000 0138 }
                 _0xC5:
                 ; 0000 0139 else if (BUTTON_B == 1)
0001a9 c009      	RJMP _0xC6
                 _0xC4:
0001aa 9b35      	SBIS 0x6,5
0001ab c007      	RJMP _0xC7
                 ; 0000 013A {
                 ; 0000 013B delay_ms(300);
0001ac d1e1      	RCALL SUBOPT_0xF
                 ; 0000 013C TIMSK1 |= (1 << OCIE1A);
                 ; 0000 013D start = 1;
0001ad e0e1      	LDI  R30,LOW(1)
0001ae e0f0      	LDI  R31,HIGH(1)
0001af 93e0 0310 	STS  _start,R30
0001b1 93f0 0311 	STS  _start+1,R31
                 ; 0000 013E }
                 ; 0000 013F // Update Digit Values
                 ; 0000 0140 digits[0] = minutes_timer / 10;
                 _0xC7:
                 _0xC6:
                 _0xC3:
0001b3 d1f3      	RCALL SUBOPT_0x13
0001b4 d1ad      	RCALL SUBOPT_0x8
                 ; 0000 0141 digits[1] = minutes_timer % 10;
0001b5 d1f1      	RCALL SUBOPT_0x13
0001b6 d1b1      	RCALL SUBOPT_0x9
                 ; 0000 0142 digits[2] = seconds_timer / 10;
0001b7 d1f4      	RCALL SUBOPT_0x14
0001b8 d1ba      	RCALL SUBOPT_0xB
                 ; 0000 0143 digits[3] = seconds_timer % 10;
0001b9 d1f2      	RCALL SUBOPT_0x14
0001ba d1be      	RCALL SUBOPT_0xC
                 ; 0000 0144 if (minutes_timer == 0 && seconds_timer == 0 && start == 1)
0001bb 2400      	CLR  R0
0001bc 140b      	CP   R0,R11
0001bd 040c      	CPC  R0,R12
0001be f451      	BRNE _0xC9
0001bf 2400      	CLR  R0
0001c0 1409      	CP   R0,R9
0001c1 040a      	CPC  R0,R10
0001c2 f431      	BRNE _0xC9
0001c3 91a0 0310 	LDS  R26,_start
0001c5 91b0 0311 	LDS  R27,_start+1
0001c7 9711      	SBIW R26,1
0001c8 f009      	BREQ _0xCA
                 _0xC9:
0001c9 c001      	RJMP _0xC8
                 _0xCA:
                 ; 0000 0145 {
                 ; 0000 0146 PIN_BUZZ = 1;
0001ca 9a5a      	SBI  0xB,2
                 ; 0000 0147 }
                 ; 0000 0148 }
                 _0xC8:
0001cb cfb6      	RJMP _0xBE
                 _0xC0:
                 ; 0000 0149 // Clear the external interrupt flag
                 ; 0000 014A EIFR &= (0 << INTF1);
0001cc c003      	RJMP _0x2000001
                 ; 0000 014B 
                 ; 0000 014C // Return from function
                 ; 0000 014D return;
                 ; 0000 014E }
                 ; .FEND
                 ;void tampilanJam(void)
                 ; 0000 0151 {
                 _tampilanJam:
                 ; .FSTART _tampilanJam
                 ; 0000 0152 #asm("sei")
0001cd 9478      	SEI
                 ; 0000 0153 
                 ; 0000 0154 while (!(EIFR & (1 << INTF1)))
                 _0xCD:
0001ce 9be1      	SBIS 0x1C,1
                 ; 0000 0155 { // menunggu sampai interrupt ditekan
                 ; 0000 0156 }
0001cf cffe      	RJMP _0xCD
                 ; 0000 0157 
                 ; 0000 0158 // Clear the external interrupt flag
                 ; 0000 0159 EIFR &= (0 << INTF1);
                 _0x2000001:
0001d0 b3ec      	IN   R30,0x1C
0001d1 70e0      	ANDI R30,LOW(0x0)
0001d2 bbec      	OUT  0x1C,R30
                 ; 0000 015A 
                 ; 0000 015B // Return from function
                 ; 0000 015C return;
0001d3 9508      	RET
                 ; 0000 015D }
                 ; .FEND
                 ;interrupt[3] void ext_int1_isr(void)
                 ; 0000 0161 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0001d4 d1dc      	RCALL SUBOPT_0x15
                 ; 0000 0162 PIN_BUZZ = 0;
0001d5 985a      	CBI  0xB,2
                 ; 0000 0163 delay_ms(300);
0001d6 e2ac      	LDI  R26,LOW(300)
0001d7 e0b1      	LDI  R27,HIGH(300)
0001d8 d26a      	RCALL _delay_ms
                 ; 0000 0164 if (mode == 1)
0001d9 d1e5      	RCALL SUBOPT_0x16
0001da f441      	BRNE _0xD2
                 ; 0000 0165 { // mode stopwatch
                 ; 0000 0166 atur = 1;
0001db d1a3      	RCALL SUBOPT_0xD
                 ; 0000 0167 mode = 2;
0001dc e0e2      	LDI  R30,LOW(2)
0001dd e0f0      	LDI  R31,HIGH(2)
                +
0001de 2e3e     +MOV R3 , R30
0001df 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 0168 TIMSK1 &= ~(1 << OCIE1A);
0001e0 d15e      	RCALL SUBOPT_0x2
                 ; 0000 0169 stopWatch();
0001e1 df7a      	RCALL _stopWatch
                 ; 0000 016A }
                 ; 0000 016B else if (mode == 0)
0001e2 c016      	RJMP _0xD3
                 _0xD2:
0001e3 2c03      	MOV  R0,R3
0001e4 2804      	OR   R0,R4
0001e5 f461      	BRNE _0xD4
                 ; 0000 016C { // mode tampilan
                 ; 0000 016D atur = 1;
0001e6 d198      	RCALL SUBOPT_0xD
                 ; 0000 016E mode = 1;
0001e7 e0e1      	LDI  R30,LOW(1)
0001e8 e0f0      	LDI  R31,HIGH(1)
                +
0001e9 2e3e     +MOV R3 , R30
0001ea 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 016F TIMSK1 |= (1 << OCIE1A); // 256
0001eb 91e0 006f 	LDS  R30,111
0001ed 60e2      	ORI  R30,2
0001ee 93e0 006f 	STS  111,R30
                 ; 0000 0170 tampilanJam();
0001f0 dfdc      	RCALL _tampilanJam
                 ; 0000 0171 }
                 ; 0000 0172 else if (mode == 2)
0001f1 c007      	RJMP _0xD5
                 _0xD4:
0001f2 d1d1      	RCALL SUBOPT_0x17
0001f3 f429      	BRNE _0xD6
                 ; 0000 0173 { // mode timer
                 ; 0000 0174 atur = 1;
0001f4 d18a      	RCALL SUBOPT_0xD
                 ; 0000 0175 mode = 0;
0001f5 2433      	CLR  R3
0001f6 2444      	CLR  R4
                 ; 0000 0176 TIMSK1 &= ~(1 << OCIE1A);
0001f7 d147      	RCALL SUBOPT_0x2
                 ; 0000 0177 alarmTimer();
0001f8 df7e      	RCALL _alarmTimer
                 ; 0000 0178 }
                 ; 0000 0179 /*else if (mode == 0)
                 ; 0000 017A {           //mode mengatur
                 ; 0000 017B mode = 1;
                 ; 0000 017C TIMSK1 &= ~(1 << OCIE1A);
                 ; 0000 017D aturJam();
                 ; 0000 017E }  */
                 ; 0000 017F }
                 _0xD6:
                 _0xD5:
                 _0xD3:
0001f9 c0ff      	RJMP _0x17B
                 ; .FEND
                 ;interrupt[12] void timera_compa_isr(void)
                 ; 0000 0183 {
                 _timera_compa_isr:
                 ; .FSTART _timera_compa_isr
0001fa 920a      	ST   -Y,R0
0001fb 921a      	ST   -Y,R1
0001fc 939a      	ST   -Y,R25
0001fd 93aa      	ST   -Y,R26
0001fe 93ba      	ST   -Y,R27
0001ff 93ea      	ST   -Y,R30
000200 93fa      	ST   -Y,R31
000201 b7ef      	IN   R30,SREG
000202 93ea      	ST   -Y,R30
                 ; 0000 0184 if (mode == 1)
000203 d1bb      	RCALL SUBOPT_0x16
000204 f491      	BRNE _0xD7
                 ; 0000 0185 {
                 ; 0000 0186 // Check if 1 Second has Passed
                 ; 0000 0187 seconds_jam++;
000205 d1c3      	RCALL SUBOPT_0x18
                 ; 0000 0188 
                 ; 0000 0189 // Check if 1 Minute has Passed
                 ; 0000 018A if (seconds_jam >= 60)
000206 f01c      	BRLT _0xD8
                 ; 0000 018B {
                 ; 0000 018C seconds_jam = 0;
000207 2455      	CLR  R5
000208 2466      	CLR  R6
                 ; 0000 018D minutes_jam++;
000209 d149      	RCALL SUBOPT_0x5
                 ; 0000 018E }
                 ; 0000 018F if (minutes_jam >= 60)
                 _0xD8:
00020a d14d      	RCALL SUBOPT_0x6
00020b f014      	BRLT _0xD9
                 ; 0000 0190 {
                 ; 0000 0191 minutes_jam = 0;
00020c 2477      	CLR  R7
00020d 2488      	CLR  R8
                 ; 0000 0192 }
                 ; 0000 0193 // Update Digit Values
                 ; 0000 0194 digits[0] = minutes_jam / 10;
                 _0xD9:
00020e d14e      	RCALL SUBOPT_0x7
00020f d152      	RCALL SUBOPT_0x8
                 ; 0000 0195 digits[1] = minutes_jam % 10;
000210 d14c      	RCALL SUBOPT_0x7
000211 d156      	RCALL SUBOPT_0x9
                 ; 0000 0196 digits[2] = seconds_jam / 10;
000212 d15b      	RCALL SUBOPT_0xA
000213 d15f      	RCALL SUBOPT_0xB
                 ; 0000 0197 digits[3] = seconds_jam % 10;
                +
000214 2da5     +MOV R26 , R5
000215 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
000216 c065      	RJMP _0x17A
                 ; 0000 0198 }
                 ; 0000 0199 else if(mode == 0)
                 _0xD7:
000217 2c03      	MOV  R0,R3
000218 2804      	OR   R0,R4
000219 f5b1      	BRNE _0xDB
                 ; 0000 019A {
                 ; 0000 019B // Check if 1 Second has Passed
                 ; 0000 019C seconds_timer--;
                +
00021a 2de9     +MOV R30 , R9
00021b 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
00021c 9731      	SBIW R30,1
                +
00021d 2e9e     +MOV R9 , R30
00021e 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 019D seconds_jam++;
00021f d1a9      	RCALL SUBOPT_0x18
                 ; 0000 019E 
                 ; 0000 019F // Check if 1 Minute has Passed
                 ; 0000 01A0 if (seconds_jam >= 60)
000220 f01c      	BRLT _0xDC
                 ; 0000 01A1 {
                 ; 0000 01A2 seconds_jam = 0;
000221 2455      	CLR  R5
000222 2466      	CLR  R6
                 ; 0000 01A3 minutes_jam++;
000223 d12f      	RCALL SUBOPT_0x5
                 ; 0000 01A4 }
                 ; 0000 01A5 if (minutes_jam >= 60)
                 _0xDC:
000224 d133      	RCALL SUBOPT_0x6
000225 f014      	BRLT _0xDD
                 ; 0000 01A6 {
                 ; 0000 01A7 minutes_jam = 0;
000226 2477      	CLR  R7
000227 2488      	CLR  R8
                 ; 0000 01A8 }
                 ; 0000 01A9 
                 ; 0000 01AA // Check if 1 Minute has Passed
                 ; 0000 01AB if (seconds_timer == 0 && minutes_timer == 0)
                 _0xDD:
000228 2400      	CLR  R0
000229 1409      	CP   R0,R9
00022a 040a      	CPC  R0,R10
00022b f421      	BRNE _0xDF
00022c 2400      	CLR  R0
00022d 140b      	CP   R0,R11
00022e 040c      	CPC  R0,R12
00022f f009      	BREQ _0xE0
                 _0xDF:
000230 c001      	RJMP _0xDE
                 _0xE0:
                 ; 0000 01AC { // timer sudah mencapai 0
                 ; 0000 01AD TIMSK1 &= ~(1 << OCIE1A);
000231 d10d      	RCALL SUBOPT_0x2
                 ; 0000 01AE }
                 ; 0000 01AF if (seconds_timer <= -1)
                 _0xDE:
000232 efef      	LDI  R30,LOW(65535)
000233 efff      	LDI  R31,HIGH(65535)
000234 15e9      	CP   R30,R9
000235 05fa      	CPC  R31,R10
000236 f04c      	BRLT _0xE1
                 ; 0000 01B0 {
                 ; 0000 01B1 seconds_timer = 59;
000237 e3eb      	LDI  R30,LOW(59)
000238 e0f0      	LDI  R31,HIGH(59)
                +
000239 2e9e     +MOV R9 , R30
00023a 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 01B2 minutes_timer--;
                +
00023b 2deb     +MOV R30 , R11
00023c 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
00023d 9731      	SBIW R30,1
                +
00023e 2ebe     +MOV R11 , R30
00023f 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 01B3 }
                 ; 0000 01B4 if (minutes_timer <= -1)
                 _0xE1:
000240 efef      	LDI  R30,LOW(65535)
000241 efff      	LDI  R31,HIGH(65535)
000242 15eb      	CP   R30,R11
000243 05fc      	CPC  R31,R12
000244 f014      	BRLT _0xE2
                 ; 0000 01B5 {
                 ; 0000 01B6 minutes_timer = 0;
000245 24bb      	CLR  R11
000246 24cc      	CLR  R12
                 ; 0000 01B7 }
                 ; 0000 01B8 // Update Digit Values
                 ; 0000 01B9 digits[0] = minutes_timer / 10;
                 _0xE2:
000247 d15f      	RCALL SUBOPT_0x13
000248 d119      	RCALL SUBOPT_0x8
                 ; 0000 01BA digits[1] = minutes_timer % 10;
000249 d15d      	RCALL SUBOPT_0x13
00024a d11d      	RCALL SUBOPT_0x9
                 ; 0000 01BB digits[2] = seconds_timer / 10;
00024b d160      	RCALL SUBOPT_0x14
00024c d126      	RCALL SUBOPT_0xB
                 ; 0000 01BC digits[3] = seconds_timer % 10;
                +
00024d 2da9     +MOV R26 , R9
00024e 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
00024f c02c      	RJMP _0x17A
                 ; 0000 01BD }
                 ; 0000 01BE else if (mode == 2)
                 _0xDB:
000250 d173      	RCALL SUBOPT_0x17
000251 f569      	BRNE _0xE4
                 ; 0000 01BF {
                 ; 0000 01C0 // Check if 1 Second has Passed
                 ; 0000 01C1 seconds_stopwatch++;
000252 e0e1      	LDI  R30,LOW(1)
000253 e0f0      	LDI  R31,HIGH(1)
                +
000254 0ede     +ADD R13 , R30
000255 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
                 ; 0000 01C2 seconds_jam++;
000256 d172      	RCALL SUBOPT_0x18
                 ; 0000 01C3 
                 ; 0000 01C4 // Check if 1 Minute has Passed
                 ; 0000 01C5 if (seconds_jam >= 60)
000257 f01c      	BRLT _0xE5
                 ; 0000 01C6 {
                 ; 0000 01C7 seconds_jam = 0;
000258 2455      	CLR  R5
000259 2466      	CLR  R6
                 ; 0000 01C8 minutes_jam++;
00025a d0f8      	RCALL SUBOPT_0x5
                 ; 0000 01C9 }
                 ; 0000 01CA if (minutes_jam >= 60)
                 _0xE5:
00025b d0fc      	RCALL SUBOPT_0x6
00025c f014      	BRLT _0xE6
                 ; 0000 01CB {
                 ; 0000 01CC minutes_jam = 0;
00025d 2477      	CLR  R7
00025e 2488      	CLR  R8
                 ; 0000 01CD }
                 ; 0000 01CE // Check if 1 Minute has Passed
                 ; 0000 01CF if (seconds_stopwatch >= 60)
                 _0xE6:
00025f e3ec      	LDI  R30,LOW(60)
000260 e0f0      	LDI  R31,HIGH(60)
000261 16de      	CP   R13,R30
000262 06ef      	CPC  R14,R31
000263 f02c      	BRLT _0xE7
                 ; 0000 01D0 {
                 ; 0000 01D1 seconds_stopwatch = 0;
000264 24dd      	CLR  R13
000265 24ee      	CLR  R14
                 ; 0000 01D2 minutes_stopwatch++;
000266 e0a0      	LDI  R26,LOW(_minutes_stopwatch)
000267 e0b3      	LDI  R27,HIGH(_minutes_stopwatch)
000268 d165      	RCALL SUBOPT_0x19
                 ; 0000 01D3 }
                 ; 0000 01D4 if (minutes_stopwatch >= 60)
                 _0xE7:
000269 91a0 0300 	LDS  R26,_minutes_stopwatch
00026b 91b0 0301 	LDS  R27,_minutes_stopwatch+1
00026d 97dc      	SBIW R26,60
00026e f02c      	BRLT _0xE8
                 ; 0000 01D5 {
                 ; 0000 01D6 minutes_stopwatch = 00;
00026f e0e0      	LDI  R30,LOW(0)
000270 93e0 0300 	STS  _minutes_stopwatch,R30
000272 93e0 0301 	STS  _minutes_stopwatch+1,R30
                 ; 0000 01D7 }
                 ; 0000 01D8 // Update Digit Values
                 ; 0000 01D9 digits[0] = minutes_stopwatch / 10;
                 _0xE8:
000274 d126      	RCALL SUBOPT_0x11
000275 d0ec      	RCALL SUBOPT_0x8
                 ; 0000 01DA digits[1] = minutes_stopwatch % 10;
000276 d124      	RCALL SUBOPT_0x11
000277 d0f0      	RCALL SUBOPT_0x9
                 ; 0000 01DB digits[2] = seconds_stopwatch / 10;
000278 d129      	RCALL SUBOPT_0x12
000279 d0f9      	RCALL SUBOPT_0xB
                 ; 0000 01DC digits[3] = seconds_stopwatch % 10;
                +
00027a 2dad     +MOV R26 , R13
00027b 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
                 _0x17A:
00027c e0ea      	LDI  R30,LOW(10)
00027d e0f0      	LDI  R31,HIGH(10)
00027e d0fa      	RCALL SUBOPT_0xC
                 ; 0000 01DD }
                 ; 0000 01DE }
                 _0xE4:
00027f 91e9      	LD   R30,Y+
000280 bfef      	OUT  SREG,R30
000281 91f9      	LD   R31,Y+
000282 91e9      	LD   R30,Y+
000283 91b9      	LD   R27,Y+
000284 91a9      	LD   R26,Y+
000285 9199      	LD   R25,Y+
000286 9019      	LD   R1,Y+
000287 9009      	LD   R0,Y+
000288 9518      	RETI
                 ; .FEND
                 ;interrupt[17] void timer0_ovf_isr(void)
                 ; 0000 01E2 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000289 d127      	RCALL SUBOPT_0x15
                 ; 0000 01E3 // Update Segment Values for Current Digit
                 ; 0000 01E4 SevenSegment(digits[digit_index]);
00028a d149      	RCALL SUBOPT_0x1A
00028b e0a2      	LDI  R26,LOW(_digits)
00028c e0b3      	LDI  R27,HIGH(_digits)
00028d 0fee      	LSL  R30
00028e 1fff      	ROL  R31
00028f 0fae      	ADD  R26,R30
000290 1fbf      	ADC  R27,R31
000291 91ed      	LD   R30,X+
000292 91fd      	LD   R31,X+
000293 01df      	MOVW R26,R30
000294 de03      	RCALL _SevenSegment
                 ; 0000 01E5 
                 ; 0000 01E6 // Enable Multiplexing for Current Digit
                 ; 0000 01E7 // Elif for choose seven SevenSegmen
                 ; 0000 01E8 if (atur == 1)
000295 91a0 030c 	LDS  R26,_atur
000297 91b0 030d 	LDS  R27,_atur+1
000299 9711      	SBIW R26,1
00029a f4a1      	BRNE _0xE9
                 ; 0000 01E9 {
                 ; 0000 01EA if (digit_index == 0)
00029b d138      	RCALL SUBOPT_0x1A
00029c 9730      	SBIW R30,0
00029d f411      	BRNE _0xEA
                 ; 0000 01EB {
                 ; 0000 01EC DIGIT_1 = 1;
00029e d13a      	RCALL SUBOPT_0x1B
                 ; 0000 01ED DIGIT_2 = 0;
                 ; 0000 01EE DIGIT_3 = 0;
                 ; 0000 01EF DIGIT_4 = 0;
                 ; 0000 01F0 }
                 ; 0000 01F1 else if (digit_index == 1)
00029f c00e      	RJMP _0xF3
                 _0xEA:
0002a0 d13d      	RCALL SUBOPT_0x1C
0002a1 9711      	SBIW R26,1
0002a2 f411      	BRNE _0xF4
                 ; 0000 01F2 {
                 ; 0000 01F3 DIGIT_1 = 0;
0002a3 d13f      	RCALL SUBOPT_0x1D
                 ; 0000 01F4 DIGIT_2 = 1;
                 ; 0000 01F5 DIGIT_3 = 0;
                 ; 0000 01F6 DIGIT_4 = 0;
                 ; 0000 01F7 }
                 ; 0000 01F8 else if (digit_index == 2)
0002a4 c009      	RJMP _0xFD
                 _0xF4:
0002a5 d138      	RCALL SUBOPT_0x1C
0002a6 9712      	SBIW R26,2
0002a7 f411      	BRNE _0xFE
                 ; 0000 01F9 {
                 ; 0000 01FA DIGIT_1 = 0;
0002a8 d13f      	RCALL SUBOPT_0x1E
                 ; 0000 01FB DIGIT_2 = 0;
                 ; 0000 01FC DIGIT_3 = 1;
                 ; 0000 01FD DIGIT_4 = 0;
                 ; 0000 01FE }
                 ; 0000 01FF else if (digit_index == 3)
0002a9 c004      	RJMP _0x107
                 _0xFE:
0002aa d133      	RCALL SUBOPT_0x1C
0002ab 9713      	SBIW R26,3
0002ac f409      	BRNE _0x108
                 ; 0000 0200 {
                 ; 0000 0201 DIGIT_1 = 0;
0002ad d13f      	RCALL SUBOPT_0x1F
                 ; 0000 0202 DIGIT_2 = 0;
                 ; 0000 0203 DIGIT_3 = 0;
                 ; 0000 0204 DIGIT_4 = 1;
                 ; 0000 0205 }
                 ; 0000 0206 }
                 _0x108:
                 _0x107:
                 _0xFD:
                 _0xF3:
                 ; 0000 0207 else
0002ae c03f      	RJMP _0x111
                 _0xE9:
                 ; 0000 0208 {
                 ; 0000 0209 if (digit_index == 0 && geser == 1)
0002af d12e      	RCALL SUBOPT_0x1C
0002b0 9710      	SBIW R26,0
0002b1 f411      	BRNE _0x113
0002b2 d13f      	RCALL SUBOPT_0x20
0002b3 f009      	BREQ _0x114
                 _0x113:
0002b4 c002      	RJMP _0x112
                 _0x114:
                 ; 0000 020A {
                 ; 0000 020B DIGIT_1 = 1;
0002b5 d123      	RCALL SUBOPT_0x1B
                 ; 0000 020C DIGIT_2 = 0;
                 ; 0000 020D DIGIT_3 = 0;
                 ; 0000 020E DIGIT_4 = 0;
                 ; 0000 020F }
                 ; 0000 0210 else if (digit_index == 1 && geser == 1)
0002b6 c037      	RJMP _0x11D
                 _0x112:
0002b7 d126      	RCALL SUBOPT_0x1C
0002b8 9711      	SBIW R26,1
0002b9 f411      	BRNE _0x11F
0002ba d137      	RCALL SUBOPT_0x20
0002bb f009      	BREQ _0x120
                 _0x11F:
0002bc c002      	RJMP _0x11E
                 _0x120:
                 ; 0000 0211 {
                 ; 0000 0212 DIGIT_1 = 0;
0002bd d125      	RCALL SUBOPT_0x1D
                 ; 0000 0213 DIGIT_2 = 1;
                 ; 0000 0214 DIGIT_3 = 0;
                 ; 0000 0215 DIGIT_4 = 0;
                 ; 0000 0216 }
                 ; 0000 0217 else if (digit_index == 2 && geser == 1)
0002be c02f      	RJMP _0x129
                 _0x11E:
0002bf d11e      	RCALL SUBOPT_0x1C
0002c0 9712      	SBIW R26,2
0002c1 f411      	BRNE _0x12B
0002c2 d12f      	RCALL SUBOPT_0x20
0002c3 f009      	BREQ _0x12C
                 _0x12B:
0002c4 c002      	RJMP _0x12A
                 _0x12C:
                 ; 0000 0218 {
                 ; 0000 0219 DIGIT_1 = 0;
0002c5 d132      	RCALL SUBOPT_0x21
                 ; 0000 021A DIGIT_2 = 0;
                 ; 0000 021B DIGIT_3 = 0;
                 ; 0000 021C DIGIT_4 = 0;
                 ; 0000 021D }
                 ; 0000 021E else if (digit_index == 3 && geser == 1)
0002c6 c027      	RJMP _0x135
                 _0x12A:
0002c7 d116      	RCALL SUBOPT_0x1C
0002c8 9713      	SBIW R26,3
0002c9 f411      	BRNE _0x137
0002ca d127      	RCALL SUBOPT_0x20
0002cb f009      	BREQ _0x138
                 _0x137:
0002cc c002      	RJMP _0x136
                 _0x138:
                 ; 0000 021F {
                 ; 0000 0220 DIGIT_1 = 0;
0002cd d12a      	RCALL SUBOPT_0x21
                 ; 0000 0221 DIGIT_2 = 0;
                 ; 0000 0222 DIGIT_3 = 0;
                 ; 0000 0223 DIGIT_4 = 0;
                 ; 0000 0224 }
                 ; 0000 0225 else if (digit_index == 0 && geser == 0)
0002ce c01f      	RJMP _0x141
                 _0x136:
0002cf d10e      	RCALL SUBOPT_0x1C
0002d0 9710      	SBIW R26,0
0002d1 f411      	BRNE _0x143
0002d2 d12a      	RCALL SUBOPT_0x22
0002d3 f009      	BREQ _0x144
                 _0x143:
0002d4 c002      	RJMP _0x142
                 _0x144:
                 ; 0000 0226 {
                 ; 0000 0227 DIGIT_1 = 0;
0002d5 d122      	RCALL SUBOPT_0x21
                 ; 0000 0228 DIGIT_2 = 0;
                 ; 0000 0229 DIGIT_3 = 0;
                 ; 0000 022A DIGIT_4 = 0;
                 ; 0000 022B }
                 ; 0000 022C else if (digit_index == 1 && geser == 0)
0002d6 c017      	RJMP _0x14D
                 _0x142:
0002d7 d106      	RCALL SUBOPT_0x1C
0002d8 9711      	SBIW R26,1
0002d9 f411      	BRNE _0x14F
0002da d122      	RCALL SUBOPT_0x22
0002db f009      	BREQ _0x150
                 _0x14F:
0002dc c002      	RJMP _0x14E
                 _0x150:
                 ; 0000 022D {
                 ; 0000 022E DIGIT_1 = 0;
0002dd d11a      	RCALL SUBOPT_0x21
                 ; 0000 022F DIGIT_2 = 0;
                 ; 0000 0230 DIGIT_3 = 0;
                 ; 0000 0231 DIGIT_4 = 0;
                 ; 0000 0232 }
                 ; 0000 0233 else if (digit_index == 2 && geser == 0)
0002de c00f      	RJMP _0x159
                 _0x14E:
0002df d0fe      	RCALL SUBOPT_0x1C
0002e0 9712      	SBIW R26,2
0002e1 f411      	BRNE _0x15B
0002e2 d11a      	RCALL SUBOPT_0x22
0002e3 f009      	BREQ _0x15C
                 _0x15B:
0002e4 c002      	RJMP _0x15A
                 _0x15C:
                 ; 0000 0234 {
                 ; 0000 0235 DIGIT_1 = 0;
0002e5 d102      	RCALL SUBOPT_0x1E
                 ; 0000 0236 DIGIT_2 = 0;
                 ; 0000 0237 DIGIT_3 = 1;
                 ; 0000 0238 DIGIT_4 = 0;
                 ; 0000 0239 }
                 ; 0000 023A else if (digit_index == 3 && geser == 0)
0002e6 c007      	RJMP _0x165
                 _0x15A:
0002e7 d0f6      	RCALL SUBOPT_0x1C
0002e8 9713      	SBIW R26,3
0002e9 f411      	BRNE _0x167
0002ea d112      	RCALL SUBOPT_0x22
0002eb f009      	BREQ _0x168
                 _0x167:
0002ec c001      	RJMP _0x166
                 _0x168:
                 ; 0000 023B {
                 ; 0000 023C DIGIT_1 = 0;
0002ed d0ff      	RCALL SUBOPT_0x1F
                 ; 0000 023D DIGIT_2 = 0;
                 ; 0000 023E DIGIT_3 = 0;
                 ; 0000 023F DIGIT_4 = 1;
                 ; 0000 0240 }
                 ; 0000 0241 }
                 _0x166:
                 _0x165:
                 _0x159:
                 _0x14D:
                 _0x141:
                 _0x135:
                 _0x129:
                 _0x11D:
                 _0x111:
                 ; 0000 0242 
                 ; 0000 0243 // Increment Digit Index
                 ; 0000 0244 digit_index++;
0002ee e0aa      	LDI  R26,LOW(_digit_index)
0002ef e0b3      	LDI  R27,HIGH(_digit_index)
0002f0 d0dd      	RCALL SUBOPT_0x19
                 ; 0000 0245 
                 ; 0000 0246 // Wrap Around Digit Index
                 ; 0000 0247 if (digit_index >= 4)
0002f1 d0ec      	RCALL SUBOPT_0x1C
0002f2 9714      	SBIW R26,4
0002f3 f02c      	BRLT _0x171
                 ; 0000 0248 {
                 ; 0000 0249 digit_index = 0;
0002f4 e0e0      	LDI  R30,LOW(0)
0002f5 93e0 030a 	STS  _digit_index,R30
0002f7 93e0 030b 	STS  _digit_index+1,R30
                 ; 0000 024A }
                 ; 0000 024B }
                 _0x171:
                 _0x17B:
0002f9 91e9      	LD   R30,Y+
0002fa bfef      	OUT  SREG,R30
0002fb 91f9      	LD   R31,Y+
0002fc 91e9      	LD   R30,Y+
0002fd 91b9      	LD   R27,Y+
0002fe 91a9      	LD   R26,Y+
0002ff 9199      	LD   R25,Y+
000300 9189      	LD   R24,Y+
000301 9179      	LD   R23,Y+
000302 9169      	LD   R22,Y+
000303 90f9      	LD   R15,Y+
000304 9019      	LD   R1,Y+
000305 9009      	LD   R0,Y+
000306 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 024E {
                 _main:
                 ; .FSTART _main
                 ; 0000 024F // Initialize Timer1
                 ; 0000 0250 // set prescaler 1024
                 ; 0000 0251 init_int1();
000307 dd6d      	RCALL _init_int1
                 ; 0000 0252 init_int2();
000308 dd81      	RCALL _init_int2
                 ; 0000 0253 init_buttonA();
000309 dd88      	RCALL _init_buttonA
                 ; 0000 0254 
                 ; 0000 0255 // Enable Interrupts
                 ; 0000 0256 #asm("sei")
00030a 9478      	SEI
                 ; 0000 0257 
                 ; 0000 0258 // Set Seven Segment Pins as Output
                 ; 0000 0259 DDRB = 0b111111;
00030b e3ef      	LDI  R30,LOW(63)
00030c b9e4      	OUT  0x4,R30
                 ; 0000 025A DDRD &= ~(1 << DDD3);
00030d 9853      	CBI  0xA,3
                 ; 0000 025B DDRD |= (1 << DDD2) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
00030e b1ea      	IN   R30,0xA
00030f 6fe4      	ORI  R30,LOW(0xF4)
000310 b9ea      	OUT  0xA,R30
                 ; 0000 025C DDRC |= (1 << DDC0) | (1 << DDC1);
000311 b1e7      	IN   R30,0x7
000312 60e3      	ORI  R30,LOW(0x3)
000313 b9e7      	OUT  0x7,R30
                 ; 0000 025D DDRC &= ~(1 << DDD5) & ~(1 << DDD4) & ~(1 << DDD3);
000314 b1e7      	IN   R30,0x7
000315 7ce7      	ANDI R30,LOW(0xC7)
000316 b9e7      	OUT  0x7,R30
                 ; 0000 025E PORTD |= (1 << BUTTON_A) | (1 << BUTTON_B) | (1 << BUTTON_C) | (1 << BUTTON_D);
000317 b16b      	IN   R22,11
000318 e0e0      	LDI  R30,0
000319 994b      	SBIC 0x9,3
00031a e0e1      	LDI  R30,1
00031b e0a1      	LDI  R26,LOW(1)
00031c d0ea      	RCALL __LSLB12
00031d 2e1e      	MOV  R1,R30
00031e e0e0      	LDI  R30,0
00031f 9935      	SBIC 0x6,5
000320 e0e1      	LDI  R30,1
000321 d0e5      	RCALL __LSLB12
000322 2a1e      	OR   R1,R30
000323 e0e0      	LDI  R30,0
000324 9934      	SBIC 0x6,4
000325 e0e1      	LDI  R30,1
000326 d0e0      	RCALL __LSLB12
000327 2a1e      	OR   R1,R30
000328 e0e0      	LDI  R30,0
000329 9933      	SBIC 0x6,3
00032a e0e1      	LDI  R30,1
00032b d0db      	RCALL __LSLB12
00032c 29e1      	OR   R30,R1
00032d 2be6      	OR   R30,R22
00032e b9eb      	OUT  0xB,R30
                 ; 0000 025F 
                 ; 0000 0260 TIMSK1 &= ~(1 << OCIE1A);
00032f d00f      	RCALL SUBOPT_0x2
                 ; 0000 0261 mode = 0;
000330 2433      	CLR  R3
000331 2444      	CLR  R4
                 ; 0000 0262 aturJam();
000332 ddcd      	RCALL _aturJam
                 ; 0000 0263 while (1)
                 _0x172:
                 ; 0000 0264 {
                 ; 0000 0265 }
000333 cfff      	RJMP _0x172
                 ; 0000 0266 }
                 _0x175:
000334 cfff      	RJMP _0x175
                 ; .FEND
                 
                 	.DSEG
                 _minutes_stopwatch:
000300           	.BYTE 0x2
                 _digits:
000302           	.BYTE 0x8
                 _digit_index:
00030a           	.BYTE 0x2
                 _atur:
00030c           	.BYTE 0x2
                 _geser:
00030e           	.BYTE 0x2
                 _start:
000310           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000335 9828      	CBI  0x5,0
000336 985e      	CBI  0xB,6
000337 985f      	CBI  0xB,7
000338 9829      	CBI  0x5,1
000339 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00033a 9a28      	SBI  0x5,0
00033b 985e      	CBI  0xB,6
00033c 985f      	CBI  0xB,7
00033d 9a29      	SBI  0x5,1
00033e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x2:
00033f 91e0 006f 	LDS  R30,111
000341 7fed      	ANDI R30,0xFD
000342 93e0 006f 	STS  111,R30
000344 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
000345 e2ac      	LDI  R26,LOW(300)
000346 e0b1      	LDI  R27,HIGH(300)
000347 d0fb      	RCALL _delay_ms
000348 91e0 030e 	LDS  R30,_geser
00034a 91f0 030f 	LDS  R31,_geser+1
00034c 9730      	SBIW R30,0
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
00034e e3ec      	LDI  R30,LOW(60)
00034f e0f0      	LDI  R31,HIGH(60)
000350 165e      	CP   R5,R30
000351 066f      	CPC  R6,R31
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000353 e0e1      	LDI  R30,LOW(1)
000354 e0f0      	LDI  R31,HIGH(1)
                +
000355 0e7e     +ADD R7 , R30
000356 1e8f     +ADC R8 , R31
                 	__ADDWRR 7,8,30,31
000357 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000358 e3ec      	LDI  R30,LOW(60)
000359 e0f0      	LDI  R31,HIGH(60)
00035a 167e      	CP   R7,R30
00035b 068f      	CPC  R8,R31
00035c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
                +
00035d 2da7     +MOV R26 , R7
00035e 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
00035f e0ea      	LDI  R30,LOW(10)
000360 e0f0      	LDI  R31,HIGH(10)
000361 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x8:
000362 d0bf      	RCALL __DIVW21
000363 93e0 0302 	STS  _digits,R30
000365 93f0 0303 	STS  _digits+1,R31
000367 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x9:
000368 d0be      	RCALL __MODW21
                +
000369 93e0 0304+STS _digits + ( 2 ) , R30
00036b 93f0 0305+STS _digits + ( 2 ) + 1 , R31
                 	__PUTW1MN _digits,2
00036d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
                +
00036e 2da5     +MOV R26 , R5
00036f 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
000370 e0ea      	LDI  R30,LOW(10)
000371 e0f0      	LDI  R31,HIGH(10)
000372 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xB:
000373 d0ae      	RCALL __DIVW21
                +
000374 93e0 0306+STS _digits + ( 4 ) , R30
000376 93f0 0307+STS _digits + ( 4 ) + 1 , R31
                 	__PUTW1MN _digits,4
000378 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xC:
000379 d0ad      	RCALL __MODW21
                +
00037a 93e0 0308+STS _digits + ( 6 ) , R30
00037c 93f0 0309+STS _digits + ( 6 ) + 1 , R31
                 	__PUTW1MN _digits,6
00037e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
00037f e0e1      	LDI  R30,LOW(1)
000380 e0f0      	LDI  R31,HIGH(1)
000381 93e0 030c 	STS  _atur,R30
000383 93f0 030d 	STS  _atur+1,R31
000385 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000386 24dd      	CLR  R13
000387 24ee      	CLR  R14
000388 e0e0      	LDI  R30,LOW(0)
000389 93e0 0300 	STS  _minutes_stopwatch,R30
00038b 93e0 0301 	STS  _minutes_stopwatch+1,R30
00038d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
00038e e2ac      	LDI  R26,LOW(300)
00038f e0b1      	LDI  R27,HIGH(300)
000390 d0b2      	RCALL _delay_ms
000391 91e0 006f 	LDS  R30,111
000393 60e2      	ORI  R30,2
000394 93e0 006f 	STS  111,R30
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000397 e2ac      	LDI  R26,LOW(300)
000398 e0b1      	LDI  R27,HIGH(300)
000399 d0a9      	RCALL _delay_ms
00039a cfa4      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x11:
00039b 91a0 0300 	LDS  R26,_minutes_stopwatch
00039d 91b0 0301 	LDS  R27,_minutes_stopwatch+1
00039f e0ea      	LDI  R30,LOW(10)
0003a0 e0f0      	LDI  R31,HIGH(10)
0003a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x12:
                +
0003a2 2dad     +MOV R26 , R13
0003a3 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
0003a4 e0ea      	LDI  R30,LOW(10)
0003a5 e0f0      	LDI  R31,HIGH(10)
0003a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
                +
0003a7 2dab     +MOV R26 , R11
0003a8 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
0003a9 e0ea      	LDI  R30,LOW(10)
0003aa e0f0      	LDI  R31,HIGH(10)
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
                +
0003ac 2da9     +MOV R26 , R9
0003ad 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
0003ae e0ea      	LDI  R30,LOW(10)
0003af e0f0      	LDI  R31,HIGH(10)
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x15:
0003b1 920a      	ST   -Y,R0
0003b2 921a      	ST   -Y,R1
0003b3 92fa      	ST   -Y,R15
0003b4 936a      	ST   -Y,R22
0003b5 937a      	ST   -Y,R23
0003b6 938a      	ST   -Y,R24
0003b7 939a      	ST   -Y,R25
0003b8 93aa      	ST   -Y,R26
0003b9 93ba      	ST   -Y,R27
0003ba 93ea      	ST   -Y,R30
0003bb 93fa      	ST   -Y,R31
0003bc b7ef      	IN   R30,SREG
0003bd 93ea      	ST   -Y,R30
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0003bf e0e1      	LDI  R30,LOW(1)
0003c0 e0f0      	LDI  R31,HIGH(1)
0003c1 15e3      	CP   R30,R3
0003c2 05f4      	CPC  R31,R4
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0003c4 e0e2      	LDI  R30,LOW(2)
0003c5 e0f0      	LDI  R31,HIGH(2)
0003c6 15e3      	CP   R30,R3
0003c7 05f4      	CPC  R31,R4
0003c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x18:
0003c9 e0e1      	LDI  R30,LOW(1)
0003ca e0f0      	LDI  R31,HIGH(1)
                +
0003cb 0e5e     +ADD R5 , R30
0003cc 1e6f     +ADC R6 , R31
                 	__ADDWRR 5,6,30,31
0003cd cf80      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
0003ce 91ed      	LD   R30,X+
0003cf 91fd      	LD   R31,X+
0003d0 9631      	ADIW R30,1
0003d1 93fe      	ST   -X,R31
0003d2 93ee      	ST   -X,R30
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0003d4 91e0 030a 	LDS  R30,_digit_index
0003d6 91f0 030b 	LDS  R31,_digit_index+1
0003d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0003d9 9a2d      	SBI  0x5,5
0003da 982b      	CBI  0x5,3
0003db 982c      	CBI  0x5,4
0003dc 982a      	CBI  0x5,2
0003dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x1C:
0003de 91a0 030a 	LDS  R26,_digit_index
0003e0 91b0 030b 	LDS  R27,_digit_index+1
0003e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
0003e3 982d      	CBI  0x5,5
0003e4 9a2b      	SBI  0x5,3
0003e5 982c      	CBI  0x5,4
0003e6 982a      	CBI  0x5,2
0003e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
0003e8 982d      	CBI  0x5,5
0003e9 982b      	CBI  0x5,3
0003ea 9a2c      	SBI  0x5,4
0003eb 982a      	CBI  0x5,2
0003ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0003ed 982d      	CBI  0x5,5
0003ee 982b      	CBI  0x5,3
0003ef 982c      	CBI  0x5,4
0003f0 9a2a      	SBI  0x5,2
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x20:
0003f2 91a0 030e 	LDS  R26,_geser
0003f4 91b0 030f 	LDS  R27,_geser+1
0003f6 9711      	SBIW R26,1
0003f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x21:
0003f8 982d      	CBI  0x5,5
0003f9 982b      	CBI  0x5,3
0003fa 982c      	CBI  0x5,4
0003fb 982a      	CBI  0x5,2
0003fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x22:
0003fd 91a0 030e 	LDS  R26,_geser
0003ff 91b0 030f 	LDS  R27,_geser+1
000401 9710      	SBIW R26,0
000402 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
000403 95f1      	NEG  R31
000404 95e1      	NEG  R30
000405 40f0      	SBCI R31,0
000406 9508      	RET
                 
                 __LSLB12:
000407 23ee      	TST  R30
000408 2e0e      	MOV  R0,R30
000409 2fea      	MOV  R30,R26
00040a f019      	BREQ __LSLB12R
                 __LSLB12L:
00040b 0fee      	LSL  R30
00040c 940a      	DEC  R0
00040d f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00040e 9508      	RET
                 
                 __DIVW21U:
00040f 2400      	CLR  R0
000410 2411      	CLR  R1
000411 e190      	LDI  R25,16
                 __DIVW21U1:
000412 0faa      	LSL  R26
000413 1fbb      	ROL  R27
000414 1c00      	ROL  R0
000415 1c11      	ROL  R1
000416 1a0e      	SUB  R0,R30
000417 0a1f      	SBC  R1,R31
000418 f418      	BRCC __DIVW21U2
000419 0e0e      	ADD  R0,R30
00041a 1e1f      	ADC  R1,R31
00041b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00041c 60a1      	SBR  R26,1
                 __DIVW21U3:
00041d 959a      	DEC  R25
00041e f799      	BRNE __DIVW21U1
00041f 01fd      	MOVW R30,R26
000420 01d0      	MOVW R26,R0
000421 9508      	RET
                 
                 __DIVW21:
000422 d012      	RCALL __CHKSIGNW
000423 dfeb      	RCALL __DIVW21U
000424 f40e      	BRTC __DIVW211
000425 dfdd      	RCALL __ANEGW1
                 __DIVW211:
000426 9508      	RET
                 
                 __MODW21:
000427 94e8      	CLT
000428 ffb7      	SBRS R27,7
000429 c004      	RJMP __MODW211
00042a 95b1      	NEG  R27
00042b 95a1      	NEG  R26
00042c 40b0      	SBCI R27,0
00042d 9468      	SET
                 __MODW211:
00042e fdf7      	SBRC R31,7
00042f dfd3      	RCALL __ANEGW1
000430 dfde      	RCALL __DIVW21U
000431 01fd      	MOVW R30,R26
000432 f40e      	BRTC __MODW212
000433 dfcf      	RCALL __ANEGW1
                 __MODW212:
000434 9508      	RET
                 
                 __CHKSIGNW:
000435 94e8      	CLT
000436 fff7      	SBRS R31,7
000437 c002      	RJMP __CHKSW1
000438 dfca      	RCALL __ANEGW1
000439 9468      	SET
                 __CHKSW1:
00043a ffb7      	SBRS R27,7
00043b c006      	RJMP __CHKSW2
00043c 95b1      	NEG  R27
00043d 95a1      	NEG  R26
00043e 40b0      	SBCI R27,0
00043f f800      	BLD  R0,0
000440 9403      	INC  R0
000441 fa00      	BST  R0,0
                 __CHKSW2:
000442 9508      	RET
                 
                 _delay_ms:
000443 9610      	adiw r26,0
000444 f039      	breq __delay_ms1
                 __delay_ms0:
000445 95a8      	wdr
                +
000446 ea80     +LDI R24 , LOW ( 0xFA0 )
000447 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000448 9701     +SBIW R24 , 1
000449 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00044a 9711      	sbiw r26,1
00044b f7c9      	brne __delay_ms0
                 __delay_ms1:
00044c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  36 r1 :  13 r2 :   0 r3 :   8 r4 :   8 r5 :  14 r6 :  14 r7 :  11 
r8 :  11 r9 :  13 r10:  13 r11:  12 r12:  12 r13:   6 r14:   6 r15:   2 
r16:  13 r17:  12 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   2 
r24:  11 r25:   9 r26:  62 r27:  39 r28:   1 r29:   1 r30: 223 r31: 107 
x  :   9 y  :  44 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   6 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :  17 brmi  :   0 brne  :  42 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  45 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  42 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :  24 cpc   :  24 cpi   :   0 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  27 ld    :  26 ldd   :   0 ldi   : 138 
lds   :  21 lpm   :   7 lsl   :   3 lsr   :   0 mov   :  60 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   7 
ori   :   4 out   :  17 pop   :   0 push  :   0 rcall : 151 ret   :  45 
reti  :   2 rjmp  :  72 rol   :   4 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  22 sbic  :   7 sbis  :  10 sbiw  :  31 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   5 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   0 sts   :  38 sub   :   1 subi  :   0 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00089a   2166     36   2202   32768   6.7%
[.dseg] 0x000100 0x000312      0     18     18    2048   0.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
