
AVRASM ver. 2.1.30  E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm Wed Mar 08 21:04:45 2023

E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1420): warning: Register r3 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1421): warning: Register r4 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1422): warning: Register r5 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1423): warning: Register r6 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1424): warning: Register r7 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1425): warning: Register r8 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1426): warning: Register r9 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1427): warning: Register r10 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1428): warning: Register r11 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1429): warning: Register r12 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1430): warning: Register r13 already defined by the .DEF directive
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1431): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.50 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _seconds_jam=R3
                 	.DEF _seconds_jam_msb=R4
                 	.DEF _minutes_jam=R5
                 	.DEF _minutes_jam_msb=R6
                 	.DEF _seconds_timer=R7
                 	.DEF _seconds_timer_msb=R8
                 	.DEF _minutes_timer=R9
                 	.DEF _minutes_timer_msb=R10
                 	.DEF _seconds_stopwatch=R11
                 	.DEF _seconds_stopwatch_msb=R12
                 	.DEF _minutes_stopwatch=R13
                 	.DEF _minutes_stopwatch_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0075 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00a6 	JMP  _timera_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0149 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000
000039 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1477): warning: .cseg .db misalignment - padding zero byte
00003a 0001      	.DB  0x1
                 _0x4:
E:\Documents\Praktikum\PrakSismik\Modul1\jam\Debug\List\jam.asm(1479): warning: .cseg .db misalignment - padding zero byte
00003b 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
00003c 000c      	.DW  0x0C
00003d 0003      	.DW  0x03
00003e 0068      	.DW  __REG_VARS*2
                 
00003f 0001      	.DW  0x01
000040 030a      	.DW  _atur
000041 0074      	.DW  _0x3*2
                 
000042 0001      	.DW  0x01
000043 030c      	.DW  _geser
000044 0076      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000045 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bff5      	OUT  MCUCR,R31
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e0a0      	LDI  R26,LOW(__SRAM_START)
000055 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006b e0e0      	LDI  R30,__GPIOR0_INIT
00006c bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 01cb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void init_int1(void);
                 ;void init_int2(void);
                 ;void init_buttonA(void);
                 ;void SevenSegment(int num);
                 ;void aturJam(void);
                 ;void stopWatch(void);
                 ;void alarmTimer(void);
                 ;void tampilanJam(void);
                 
                 	.DSEG
                 ;interrupt[3] void ext_int1_isr(void)
                 ; 0000 0063 {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000075 d2c3      	RCALL SUBOPT_0x0
                 ; 0000 0064 PIN_BUZZ = 0;
000076 985a      	CBI  0xB,2
                 ; 0000 0065 delay_ms(300);
000077 e2ac      	LDI  R26,LOW(300)
000078 e0b1      	LDI  R27,HIGH(300)
000079 d3ed      	RCALL _delay_ms
                 ; 0000 0066 
                 ; 0000 0067 // mode tampilan
                 ; 0000 0068 if (mode == 0)
00007a 91e0 030e 	LDS  R30,_mode
00007c 91f0 030f 	LDS  R31,_mode+1
00007e 9730      	SBIW R30,0
00007f f461      	BRNE _0x7
                 ; 0000 0069 {
                 ; 0000 006A atur = 1;
000080 d2c6      	RCALL SUBOPT_0x1
                 ; 0000 006B mode = 1;
000081 e0e1      	LDI  R30,LOW(1)
000082 e0f0      	LDI  R31,HIGH(1)
000083 d2ca      	RCALL SUBOPT_0x2
                 ; 0000 006C start = 1;
000084 d2ce      	RCALL SUBOPT_0x3
                 ; 0000 006D TIMSK1 |= (1 << OCIE1A);
000085 91e0 006f 	LDS  R30,111
000087 60e2      	ORI  R30,2
000088 93e0 006f 	STS  111,R30
                 ; 0000 006E tampilanJam();
00008a d2a7      	RCALL _tampilanJam
                 ; 0000 006F }
                 ; 0000 0070 
                 ; 0000 0071 // mode stopwatch
                 ; 0000 0072 else if (mode == 1)
00008b c019      	RJMP _0x8
                 _0x7:
00008c d2cd      	RCALL SUBOPT_0x4
00008d 9711      	SBIW R26,1
00008e f431      	BRNE _0x9
                 ; 0000 0073 {
                 ; 0000 0074 atur = 1;
00008f d2b7      	RCALL SUBOPT_0x1
                 ; 0000 0075 mode = 2;
000090 e0e2      	LDI  R30,LOW(2)
000091 e0f0      	LDI  R31,HIGH(2)
000092 d2cc      	RCALL SUBOPT_0x5
                 ; 0000 0076 start = 0;
                 ; 0000 0077 stopWatch();
000093 d255      	RCALL _stopWatch
                 ; 0000 0078 }
                 ; 0000 0079 
                 ; 0000 007A // mode timer
                 ; 0000 007B else if (mode == 2)
000094 c010      	RJMP _0xA
                 _0x9:
000095 d2c4      	RCALL SUBOPT_0x4
000096 9712      	SBIW R26,2
000097 f431      	BRNE _0xB
                 ; 0000 007C {
                 ; 0000 007D atur = 1;
000098 d2ae      	RCALL SUBOPT_0x1
                 ; 0000 007E mode = 3;
000099 e0e3      	LDI  R30,LOW(3)
00009a e0f0      	LDI  R31,HIGH(3)
00009b d2c3      	RCALL SUBOPT_0x5
                 ; 0000 007F start = 0;
                 ; 0000 0080 alarmTimer();
00009c d267      	RCALL _alarmTimer
                 ; 0000 0081 }
                 ; 0000 0082 
                 ; 0000 0083 else if (mode == 3)
00009d c007      	RJMP _0xC
                 _0xB:
00009e d2bb      	RCALL SUBOPT_0x4
00009f 9713      	SBIW R26,3
0000a0 f421      	BRNE _0xD
                 ; 0000 0084 {
                 ; 0000 0085 atur = 0;
0000a1 d2c4      	RCALL SUBOPT_0x6
                 ; 0000 0086 mode = 0;
0000a2 d2c9      	RCALL SUBOPT_0x7
                 ; 0000 0087 start = 0;
0000a3 d2cd      	RCALL SUBOPT_0x8
                 ; 0000 0088 aturJam();
0000a4 d1e3      	RCALL _aturJam
                 ; 0000 0089 }
                 ; 0000 008A }
                 _0xD:
                 _0xC:
                 _0xA:
                 _0x8:
0000a5 c117      	RJMP _0x186
                 ; .FEND
                 ;interrupt[12] void timera_compa_isr(void)
                 ; 0000 008E {
                 _timera_compa_isr:
                 ; .FSTART _timera_compa_isr
0000a6 920a      	ST   -Y,R0
0000a7 921a      	ST   -Y,R1
0000a8 939a      	ST   -Y,R25
0000a9 93aa      	ST   -Y,R26
0000aa 93ba      	ST   -Y,R27
0000ab 93ea      	ST   -Y,R30
0000ac 93fa      	ST   -Y,R31
0000ad b7ef      	IN   R30,SREG
0000ae 93ea      	ST   -Y,R30
                 ; 0000 008F // saatnya waktu berubah
                 ; 0000 0090 if (start == 1)
0000af 91a0 0310 	LDS  R26,_start
0000b1 91b0 0311 	LDS  R27,_start+1
0000b3 9711      	SBIW R26,1
0000b4 f009      	BREQ PC+2
0000b5 c06e      	RJMP _0xE
                 ; 0000 0091 {
                 ; 0000 0092 // mengatur digit seven segment saat mode : penampilan jam
                 ; 0000 0093 if (mode == 1)
0000b6 d2a3      	RCALL SUBOPT_0x4
0000b7 9711      	SBIW R26,1
0000b8 f469      	BRNE _0xF
                 ; 0000 0094 {
                 ; 0000 0095 // satu detik berlalu
                 ; 0000 0096 seconds_jam++;
0000b9 d2bd      	RCALL SUBOPT_0x9
                 ; 0000 0097 
                 ; 0000 0098 // satu menit berlalu
                 ; 0000 0099 if (seconds_jam >= 60)
0000ba f00c      	BRLT _0x10
                 ; 0000 009A {
                 ; 0000 009B seconds_jam = 0;
0000bb d2c4      	RCALL SUBOPT_0xA
                 ; 0000 009C minutes_jam++;
                 ; 0000 009D }
                 ; 0000 009E // satu jam telah berlalu
                 ; 0000 009F if (minutes_jam >= 60)
                 _0x10:
0000bc d2ca      	RCALL SUBOPT_0xB
0000bd f014      	BRLT _0x11
                 ; 0000 00A0 {
                 ; 0000 00A1 minutes_jam = 0;
0000be 2455      	CLR  R5
0000bf 2466      	CLR  R6
                 ; 0000 00A2 }
                 ; 0000 00A3 
                 ; 0000 00A4 // mengubah nilai digit seven segment
                 ; 0000 00A5 digits[0] = minutes_jam / 10;
                 _0x11:
0000c0 d2cb      	RCALL SUBOPT_0xC
0000c1 d2cf      	RCALL SUBOPT_0xD
                 ; 0000 00A6 digits[1] = minutes_jam % 10;
0000c2 d2c9      	RCALL SUBOPT_0xC
0000c3 d2d3      	RCALL SUBOPT_0xE
                 ; 0000 00A7 digits[2] = seconds_jam / 10;
0000c4 d2d8      	RCALL SUBOPT_0xF
                 ; 0000 00A8 digits[3] = seconds_jam % 10;
0000c5 c05a      	RJMP _0x180
                 ; 0000 00A9 }
                 ; 0000 00AA 
                 ; 0000 00AB // mengatur digit seven segment saat mode : timer
                 ; 0000 00AC else if(mode == 3)
                 _0xF:
0000c6 d293      	RCALL SUBOPT_0x4
0000c7 9713      	SBIW R26,3
0000c8 f591      	BRNE _0x13
                 ; 0000 00AD {
                 ; 0000 00AE // satu detik berlalu
                 ; 0000 00AF seconds_timer--;
                +
0000c9 2de7     +MOV R30 , R7
0000ca 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
0000cb 9731      	SBIW R30,1
                +
0000cc 2e7e     +MOV R7 , R30
0000cd 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00B0 seconds_jam++;
0000ce d2a8      	RCALL SUBOPT_0x9
                 ; 0000 00B1 
                 ; 0000 00B2 // satu menit berlalu
                 ; 0000 00B3 if (seconds_jam >= 60)
0000cf f00c      	BRLT _0x14
                 ; 0000 00B4 {
                 ; 0000 00B5 seconds_jam = 0;
0000d0 d2af      	RCALL SUBOPT_0xA
                 ; 0000 00B6 minutes_jam++;
                 ; 0000 00B7 }
                 ; 0000 00B8 
                 ; 0000 00B9 // satu jam telah berlalu
                 ; 0000 00BA if (minutes_jam >= 60)
                 _0x14:
0000d1 d2b5      	RCALL SUBOPT_0xB
0000d2 f014      	BRLT _0x15
                 ; 0000 00BB {
                 ; 0000 00BC minutes_jam = 0;
0000d3 2455      	CLR  R5
0000d4 2466      	CLR  R6
                 ; 0000 00BD }
                 ; 0000 00BE 
                 ; 0000 00BF // saat timer telah selesai, buzzer berbunyi dan reset timer
                 ; 0000 00C0 if (seconds_timer == 0 && minutes_timer == 0)
                 _0x15:
0000d5 2400      	CLR  R0
0000d6 1407      	CP   R0,R7
0000d7 0408      	CPC  R0,R8
0000d8 f421      	BRNE _0x17
0000d9 2400      	CLR  R0
0000da 1409      	CP   R0,R9
0000db 040a      	CPC  R0,R10
0000dc f009      	BREQ _0x18
                 _0x17:
0000dd c002      	RJMP _0x16
                 _0x18:
                 ; 0000 00C1 { // timer sudah mencapai 0
                 ; 0000 00C2 PIN_BUZZ = 1;
0000de 9a5a      	SBI  0xB,2
                 ; 0000 00C3 start = 0;
0000df d291      	RCALL SUBOPT_0x8
                 ; 0000 00C4 }
                 ; 0000 00C5 // transisi detik ke xy:00 menjadi x(y-1) : 59
                 ; 0000 00C6 if (seconds_timer <= -1)
                 _0x16:
0000e0 efef      	LDI  R30,LOW(65535)
0000e1 efff      	LDI  R31,HIGH(65535)
0000e2 15e7      	CP   R30,R7
0000e3 05f8      	CPC  R31,R8
0000e4 f04c      	BRLT _0x1B
                 ; 0000 00C7 {
                 ; 0000 00C8 seconds_timer = 59;
0000e5 e3eb      	LDI  R30,LOW(59)
0000e6 e0f0      	LDI  R31,HIGH(59)
                +
0000e7 2e7e     +MOV R7 , R30
0000e8 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00C9 minutes_timer--;
                +
0000e9 2de9     +MOV R30 , R9
0000ea 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
0000eb 9731      	SBIW R30,1
                +
0000ec 2e9e     +MOV R9 , R30
0000ed 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 00CA }
                 ; 0000 00CB 
                 ; 0000 00CC if (minutes_timer <= -1)
                 _0x1B:
0000ee efef      	LDI  R30,LOW(65535)
0000ef efff      	LDI  R31,HIGH(65535)
0000f0 15e9      	CP   R30,R9
0000f1 05fa      	CPC  R31,R10
0000f2 f014      	BRLT _0x1C
                 ; 0000 00CD {
                 ; 0000 00CE minutes_timer = 0;
0000f3 2499      	CLR  R9
0000f4 24aa      	CLR  R10
                 ; 0000 00CF }
                 ; 0000 00D0 
                 ; 0000 00D1 // mengubah nilai digit seven segment
                 ; 0000 00D2 digits[0] = minutes_timer / 10;
                 _0x1C:
0000f5 d2b3      	RCALL SUBOPT_0x10
0000f6 d29a      	RCALL SUBOPT_0xD
                 ; 0000 00D3 digits[1] = minutes_timer % 10;
0000f7 d2b1      	RCALL SUBOPT_0x10
0000f8 d29e      	RCALL SUBOPT_0xE
                 ; 0000 00D4 digits[2] = seconds_timer / 10;
0000f9 d2b4      	RCALL SUBOPT_0x11
                 ; 0000 00D5 digits[3] = seconds_timer % 10;
0000fa c025      	RJMP _0x180
                 ; 0000 00D6 }
                 ; 0000 00D7 
                 ; 0000 00D8 // mengatur digit seven segment saat mode : stopwatch
                 ; 0000 00D9 else if (mode == 2)
                 _0x13:
0000fb d25e      	RCALL SUBOPT_0x4
0000fc 9712      	SBIW R26,2
0000fd f529      	BRNE _0x1E
                 ; 0000 00DA {
                 ; 0000 00DB // satu detik berlalu
                 ; 0000 00DC seconds_stopwatch++;
0000fe e0e1      	LDI  R30,LOW(1)
0000ff e0f0      	LDI  R31,HIGH(1)
                +
000100 0ebe     +ADD R11 , R30
000101 1ecf     +ADC R12 , R31
                 	__ADDWRR 11,12,30,31
                 ; 0000 00DD seconds_jam++; // waktu jam juga ditambah supaya waktu jam juga ikut berubah
000102 d274      	RCALL SUBOPT_0x9
                 ; 0000 00DE 
                 ; 0000 00DF if (seconds_jam >= 60)
000103 f00c      	BRLT _0x1F
                 ; 0000 00E0 {
                 ; 0000 00E1 seconds_jam = 0;
000104 d27b      	RCALL SUBOPT_0xA
                 ; 0000 00E2 minutes_jam++;
                 ; 0000 00E3 }
                 ; 0000 00E4 if (minutes_jam >= 60)
                 _0x1F:
000105 d281      	RCALL SUBOPT_0xB
000106 f014      	BRLT _0x20
                 ; 0000 00E5 {
                 ; 0000 00E6 minutes_jam = 0;
000107 2455      	CLR  R5
000108 2466      	CLR  R6
                 ; 0000 00E7 }
                 ; 0000 00E8 
                 ; 0000 00E9 // satu menit berlalu
                 ; 0000 00EA if (seconds_stopwatch >= 60)
                 _0x20:
000109 e3ec      	LDI  R30,LOW(60)
00010a e0f0      	LDI  R31,HIGH(60)
00010b 16be      	CP   R11,R30
00010c 06cf      	CPC  R12,R31
00010d f034      	BRLT _0x21
                 ; 0000 00EB {
                 ; 0000 00EC seconds_stopwatch = 0;
00010e 24bb      	CLR  R11
00010f 24cc      	CLR  R12
                 ; 0000 00ED minutes_stopwatch++;
000110 e0e1      	LDI  R30,LOW(1)
000111 e0f0      	LDI  R31,HIGH(1)
                +
000112 0ede     +ADD R13 , R30
000113 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
                 ; 0000 00EE }
                 ; 0000 00EF 
                 ; 0000 00F0 // satu jam berlalu
                 ; 0000 00F1 if (minutes_stopwatch >= 60)
                 _0x21:
000114 e3ec      	LDI  R30,LOW(60)
000115 e0f0      	LDI  R31,HIGH(60)
000116 16de      	CP   R13,R30
000117 06ef      	CPC  R14,R31
000118 f014      	BRLT _0x22
                 ; 0000 00F2 {
                 ; 0000 00F3 minutes_stopwatch = 00;
000119 24dd      	CLR  R13
00011a 24ee      	CLR  R14
                 ; 0000 00F4 }
                 ; 0000 00F5 
                 ; 0000 00F6 // mengubah nilai digit seven segment
                 ; 0000 00F7 digits[0] = minutes_stopwatch / 10;
                 _0x22:
00011b d29e      	RCALL SUBOPT_0x12
00011c d274      	RCALL SUBOPT_0xD
                 ; 0000 00F8 digits[1] = minutes_stopwatch % 10;
00011d d29c      	RCALL SUBOPT_0x12
00011e d278      	RCALL SUBOPT_0xE
                 ; 0000 00F9 digits[2] = seconds_stopwatch / 10;
00011f d29f      	RCALL SUBOPT_0x13
                 ; 0000 00FA digits[3] = seconds_stopwatch % 10;
                 _0x180:
000120 e0ea      	LDI  R30,LOW(10)
000121 e0f0      	LDI  R31,HIGH(10)
000122 d2a8      	RCALL SUBOPT_0x14
                 ; 0000 00FB }
                 ; 0000 00FC }
                 _0x1E:
                 ; 0000 00FD 
                 ; 0000 00FE // agar saat mode lain waktu tetap berjalan
                 ; 0000 00FF else
000123 c01b      	RJMP _0x23
                 _0xE:
                 ; 0000 0100 {
                 ; 0000 0101 seconds_jam++;
000124 d252      	RCALL SUBOPT_0x9
                 ; 0000 0102 
                 ; 0000 0103 // Check if 1 Minute has Passed
                 ; 0000 0104 if (seconds_jam >= 60)
000125 f00c      	BRLT _0x24
                 ; 0000 0105 {
                 ; 0000 0106 seconds_jam = 0;
000126 d259      	RCALL SUBOPT_0xA
                 ; 0000 0107 minutes_jam++;
                 ; 0000 0108 }
                 ; 0000 0109 if (minutes_jam >= 60)
                 _0x24:
000127 d25f      	RCALL SUBOPT_0xB
000128 f014      	BRLT _0x25
                 ; 0000 010A {
                 ; 0000 010B minutes_jam = 0;
000129 2455      	CLR  R5
00012a 2466      	CLR  R6
                 ; 0000 010C }
                 ; 0000 010D if (mode == 2)
                 _0x25:
00012b d22e      	RCALL SUBOPT_0x4
00012c 9712      	SBIW R26,2
00012d f431      	BRNE _0x26
                 ; 0000 010E {
                 ; 0000 010F digits[0] = minutes_stopwatch / 10;
00012e d28b      	RCALL SUBOPT_0x12
00012f d261      	RCALL SUBOPT_0xD
                 ; 0000 0110 digits[1] = minutes_stopwatch % 10;
000130 d289      	RCALL SUBOPT_0x12
000131 d265      	RCALL SUBOPT_0xE
                 ; 0000 0111 digits[2] = seconds_stopwatch / 10;
000132 d28c      	RCALL SUBOPT_0x13
                 ; 0000 0112 digits[3] = seconds_stopwatch % 10;
000133 c008      	RJMP _0x181
                 ; 0000 0113 }
                 ; 0000 0114 else if(mode == 1)
                 _0x26:
000134 d225      	RCALL SUBOPT_0x4
000135 9711      	SBIW R26,1
000136 f441      	BRNE _0x28
                 ; 0000 0115 {
                 ; 0000 0116 digits[0] = minutes_timer / 10;
000137 d271      	RCALL SUBOPT_0x10
000138 d258      	RCALL SUBOPT_0xD
                 ; 0000 0117 digits[1] = minutes_timer % 10;
000139 d26f      	RCALL SUBOPT_0x10
00013a d25c      	RCALL SUBOPT_0xE
                 ; 0000 0118 digits[2] = seconds_timer / 10;
00013b d272      	RCALL SUBOPT_0x11
                 ; 0000 0119 digits[3] = seconds_timer % 10;
                 _0x181:
00013c e0ea      	LDI  R30,LOW(10)
00013d e0f0      	LDI  R31,HIGH(10)
00013e d28c      	RCALL SUBOPT_0x14
                 ; 0000 011A }
                 ; 0000 011B }
                 _0x28:
                 _0x23:
                 ; 0000 011C }
00013f 91e9      	LD   R30,Y+
000140 bfef      	OUT  SREG,R30
000141 91f9      	LD   R31,Y+
000142 91e9      	LD   R30,Y+
000143 91b9      	LD   R27,Y+
000144 91a9      	LD   R26,Y+
000145 9199      	LD   R25,Y+
000146 9019      	LD   R1,Y+
000147 9009      	LD   R0,Y+
000148 9518      	RETI
                 ; .FEND
                 ;interrupt[17] void timer0_ovf_isr(void)
                 ; 0000 0120 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000149 d1ef      	RCALL SUBOPT_0x0
                 ; 0000 0121 // mengubah digit seven segment
                 ; 0000 0122 SevenSegment(digits[digit_index]);
00014a d286      	RCALL SUBOPT_0x15
00014b e0a0      	LDI  R26,LOW(_digits)
00014c e0b3      	LDI  R27,HIGH(_digits)
00014d 0fee      	LSL  R30
00014e 1fff      	ROL  R31
00014f 0fae      	ADD  R26,R30
000150 1fbf      	ADC  R27,R31
000151 91ed      	LD   R30,X+
000152 91fd      	LD   R31,X+
000153 01df      	MOVW R26,R30
000154 d0cb      	RCALL _SevenSegment
                 ; 0000 0123 
                 ; 0000 0124 // multiplexing / menggilir digit seven segment
                 ; 0000 0125 if (atur == 1)
000155 91a0 030a 	LDS  R26,_atur
000157 91b0 030b 	LDS  R27,_atur+1
000159 9711      	SBIW R26,1
00015a f4a1      	BRNE _0x29
                 ; 0000 0126 {
                 ; 0000 0127 if (digit_index == 0)
00015b d275      	RCALL SUBOPT_0x15
00015c 9730      	SBIW R30,0
00015d f411      	BRNE _0x2A
                 ; 0000 0128 {
                 ; 0000 0129 DIGIT_1 = 1;
00015e d277      	RCALL SUBOPT_0x16
                 ; 0000 012A DIGIT_2 = 0;
                 ; 0000 012B DIGIT_3 = 0;
                 ; 0000 012C DIGIT_4 = 0;
                 ; 0000 012D }
                 ; 0000 012E else if (digit_index == 1)
00015f c00e      	RJMP _0x33
                 _0x2A:
000160 d27a      	RCALL SUBOPT_0x17
000161 9711      	SBIW R26,1
000162 f411      	BRNE _0x34
                 ; 0000 012F {
                 ; 0000 0130 DIGIT_1 = 0;
000163 d27c      	RCALL SUBOPT_0x18
                 ; 0000 0131 DIGIT_2 = 1;
                 ; 0000 0132 DIGIT_3 = 0;
                 ; 0000 0133 DIGIT_4 = 0;
                 ; 0000 0134 }
                 ; 0000 0135 else if (digit_index == 2)
000164 c009      	RJMP _0x3D
                 _0x34:
000165 d275      	RCALL SUBOPT_0x17
000166 9712      	SBIW R26,2
000167 f411      	BRNE _0x3E
                 ; 0000 0136 {
                 ; 0000 0137 DIGIT_1 = 0;
000168 d27c      	RCALL SUBOPT_0x19
                 ; 0000 0138 DIGIT_2 = 0;
                 ; 0000 0139 DIGIT_3 = 1;
                 ; 0000 013A DIGIT_4 = 0;
                 ; 0000 013B }
                 ; 0000 013C else if (digit_index == 3)
000169 c004      	RJMP _0x47
                 _0x3E:
00016a d270      	RCALL SUBOPT_0x17
00016b 9713      	SBIW R26,3
00016c f409      	BRNE _0x48
                 ; 0000 013D {
                 ; 0000 013E DIGIT_1 = 0;
00016d d27c      	RCALL SUBOPT_0x1A
                 ; 0000 013F DIGIT_2 = 0;
                 ; 0000 0140 DIGIT_3 = 0;
                 ; 0000 0141 DIGIT_4 = 1;
                 ; 0000 0142 }
                 ; 0000 0143 }
                 _0x48:
                 _0x47:
                 _0x3D:
                 _0x33:
                 ; 0000 0144 else
00016e c03f      	RJMP _0x51
                 _0x29:
                 ; 0000 0145 {
                 ; 0000 0146 if (digit_index == 0 && geser == 1)
00016f d26b      	RCALL SUBOPT_0x17
000170 9710      	SBIW R26,0
000171 f411      	BRNE _0x53
000172 d27c      	RCALL SUBOPT_0x1B
000173 f009      	BREQ _0x54
                 _0x53:
000174 c002      	RJMP _0x52
                 _0x54:
                 ; 0000 0147 {
                 ; 0000 0148 DIGIT_1 = 1;
000175 d260      	RCALL SUBOPT_0x16
                 ; 0000 0149 DIGIT_2 = 0;
                 ; 0000 014A DIGIT_3 = 0;
                 ; 0000 014B DIGIT_4 = 0;
                 ; 0000 014C }
                 ; 0000 014D else if (digit_index == 1 && geser == 1)
000176 c037      	RJMP _0x5D
                 _0x52:
000177 d263      	RCALL SUBOPT_0x17
000178 9711      	SBIW R26,1
000179 f411      	BRNE _0x5F
00017a d274      	RCALL SUBOPT_0x1B
00017b f009      	BREQ _0x60
                 _0x5F:
00017c c002      	RJMP _0x5E
                 _0x60:
                 ; 0000 014E {
                 ; 0000 014F DIGIT_1 = 0;
00017d d262      	RCALL SUBOPT_0x18
                 ; 0000 0150 DIGIT_2 = 1;
                 ; 0000 0151 DIGIT_3 = 0;
                 ; 0000 0152 DIGIT_4 = 0;
                 ; 0000 0153 }
                 ; 0000 0154 else if (digit_index == 2 && geser == 1)
00017e c02f      	RJMP _0x69
                 _0x5E:
00017f d25b      	RCALL SUBOPT_0x17
000180 9712      	SBIW R26,2
000181 f411      	BRNE _0x6B
000182 d26c      	RCALL SUBOPT_0x1B
000183 f009      	BREQ _0x6C
                 _0x6B:
000184 c002      	RJMP _0x6A
                 _0x6C:
                 ; 0000 0155 {
                 ; 0000 0156 DIGIT_1 = 0;
000185 d26f      	RCALL SUBOPT_0x1C
                 ; 0000 0157 DIGIT_2 = 0;
                 ; 0000 0158 DIGIT_3 = 0;
                 ; 0000 0159 DIGIT_4 = 0;
                 ; 0000 015A }
                 ; 0000 015B else if (digit_index == 3 && geser == 1)
000186 c027      	RJMP _0x75
                 _0x6A:
000187 d253      	RCALL SUBOPT_0x17
000188 9713      	SBIW R26,3
000189 f411      	BRNE _0x77
00018a d264      	RCALL SUBOPT_0x1B
00018b f009      	BREQ _0x78
                 _0x77:
00018c c002      	RJMP _0x76
                 _0x78:
                 ; 0000 015C {
                 ; 0000 015D DIGIT_1 = 0;
00018d d267      	RCALL SUBOPT_0x1C
                 ; 0000 015E DIGIT_2 = 0;
                 ; 0000 015F DIGIT_3 = 0;
                 ; 0000 0160 DIGIT_4 = 0;
                 ; 0000 0161 }
                 ; 0000 0162 else if (digit_index == 0 && geser == 0)
00018e c01f      	RJMP _0x81
                 _0x76:
00018f d24b      	RCALL SUBOPT_0x17
000190 9710      	SBIW R26,0
000191 f411      	BRNE _0x83
000192 d267      	RCALL SUBOPT_0x1D
000193 f009      	BREQ _0x84
                 _0x83:
000194 c002      	RJMP _0x82
                 _0x84:
                 ; 0000 0163 {
                 ; 0000 0164 DIGIT_1 = 0;
000195 d25f      	RCALL SUBOPT_0x1C
                 ; 0000 0165 DIGIT_2 = 0;
                 ; 0000 0166 DIGIT_3 = 0;
                 ; 0000 0167 DIGIT_4 = 0;
                 ; 0000 0168 }
                 ; 0000 0169 else if (digit_index == 1 && geser == 0)
000196 c017      	RJMP _0x8D
                 _0x82:
000197 d243      	RCALL SUBOPT_0x17
000198 9711      	SBIW R26,1
000199 f411      	BRNE _0x8F
00019a d25f      	RCALL SUBOPT_0x1D
00019b f009      	BREQ _0x90
                 _0x8F:
00019c c002      	RJMP _0x8E
                 _0x90:
                 ; 0000 016A {
                 ; 0000 016B DIGIT_1 = 0;
00019d d257      	RCALL SUBOPT_0x1C
                 ; 0000 016C DIGIT_2 = 0;
                 ; 0000 016D DIGIT_3 = 0;
                 ; 0000 016E DIGIT_4 = 0;
                 ; 0000 016F }
                 ; 0000 0170 else if (digit_index == 2 && geser == 0)
00019e c00f      	RJMP _0x99
                 _0x8E:
00019f d23b      	RCALL SUBOPT_0x17
0001a0 9712      	SBIW R26,2
0001a1 f411      	BRNE _0x9B
0001a2 d257      	RCALL SUBOPT_0x1D
0001a3 f009      	BREQ _0x9C
                 _0x9B:
0001a4 c002      	RJMP _0x9A
                 _0x9C:
                 ; 0000 0171 {
                 ; 0000 0172 DIGIT_1 = 0;
0001a5 d23f      	RCALL SUBOPT_0x19
                 ; 0000 0173 DIGIT_2 = 0;
                 ; 0000 0174 DIGIT_3 = 1;
                 ; 0000 0175 DIGIT_4 = 0;
                 ; 0000 0176 }
                 ; 0000 0177 else if (digit_index == 3 && geser == 0)
0001a6 c007      	RJMP _0xA5
                 _0x9A:
0001a7 d233      	RCALL SUBOPT_0x17
0001a8 9713      	SBIW R26,3
0001a9 f411      	BRNE _0xA7
0001aa d24f      	RCALL SUBOPT_0x1D
0001ab f009      	BREQ _0xA8
                 _0xA7:
0001ac c001      	RJMP _0xA6
                 _0xA8:
                 ; 0000 0178 {
                 ; 0000 0179 DIGIT_1 = 0;
0001ad d23c      	RCALL SUBOPT_0x1A
                 ; 0000 017A DIGIT_2 = 0;
                 ; 0000 017B DIGIT_3 = 0;
                 ; 0000 017C DIGIT_4 = 1;
                 ; 0000 017D }
                 ; 0000 017E }
                 _0xA6:
                 _0xA5:
                 _0x99:
                 _0x8D:
                 _0x81:
                 _0x75:
                 _0x69:
                 _0x5D:
                 _0x51:
                 ; 0000 017F 
                 ; 0000 0180 // Increment Digit Index
                 ; 0000 0181 digit_index++;
0001ae e0a8      	LDI  R26,LOW(_digit_index)
0001af e0b3      	LDI  R27,HIGH(_digit_index)
0001b0 91ed      	LD   R30,X+
0001b1 91fd      	LD   R31,X+
0001b2 9631      	ADIW R30,1
0001b3 93fe      	ST   -X,R31
0001b4 93ee      	ST   -X,R30
                 ; 0000 0182 
                 ; 0000 0183 // Wrap Around Digit Index
                 ; 0000 0184 if (digit_index >= 4)
0001b5 d225      	RCALL SUBOPT_0x17
0001b6 9714      	SBIW R26,4
0001b7 f02c      	BRLT _0xB1
                 ; 0000 0185 {
                 ; 0000 0186 digit_index = 0;
0001b8 e0e0      	LDI  R30,LOW(0)
0001b9 93e0 0308 	STS  _digit_index,R30
0001bb 93e0 0309 	STS  _digit_index+1,R30
                 ; 0000 0187 }
                 ; 0000 0188 }
                 _0xB1:
                 _0x186:
0001bd 91e9      	LD   R30,Y+
0001be bfef      	OUT  SREG,R30
0001bf 91f9      	LD   R31,Y+
0001c0 91e9      	LD   R30,Y+
0001c1 91b9      	LD   R27,Y+
0001c2 91a9      	LD   R26,Y+
0001c3 9199      	LD   R25,Y+
0001c4 9189      	LD   R24,Y+
0001c5 9179      	LD   R23,Y+
0001c6 9169      	LD   R22,Y+
0001c7 90f9      	LD   R15,Y+
0001c8 9019      	LD   R1,Y+
0001c9 9009      	LD   R0,Y+
0001ca 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 018C {
                 _main:
                 ; .FSTART _main
                 ; 0000 018D // Initialize Timer1
                 ; 0000 018E // set prescaler 1024
                 ; 0000 018F init_int1();
0001cb d031      	RCALL _init_int1
                 ; 0000 0190 init_int2();
0001cc d045      	RCALL _init_int2
                 ; 0000 0191 init_buttonA();
0001cd d04c      	RCALL _init_buttonA
                 ; 0000 0192 
                 ; 0000 0193 // Enable Interrupts
                 ; 0000 0194 #asm("sei")
0001ce 9478      	SEI
                 ; 0000 0195 
                 ; 0000 0196 // Set Seven Segment Pins as Output
                 ; 0000 0197 DDRB = 0b111111;
0001cf e3ef      	LDI  R30,LOW(63)
0001d0 b9e4      	OUT  0x4,R30
                 ; 0000 0198 DDRD &= ~(1 << DDD3);
0001d1 9853      	CBI  0xA,3
                 ; 0000 0199 DDRD |= (1 << DDD2) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
0001d2 b1ea      	IN   R30,0xA
0001d3 6fe4      	ORI  R30,LOW(0xF4)
0001d4 b9ea      	OUT  0xA,R30
                 ; 0000 019A DDRC |= (1 << DDC0) | (1 << DDC1);
0001d5 b1e7      	IN   R30,0x7
0001d6 60e3      	ORI  R30,LOW(0x3)
0001d7 b9e7      	OUT  0x7,R30
                 ; 0000 019B DDRC &= ~(1 << DDD5) & ~(1 << DDD4) & ~(1 << DDD3);
0001d8 b1e7      	IN   R30,0x7
0001d9 7ce7      	ANDI R30,LOW(0xC7)
0001da b9e7      	OUT  0x7,R30
                 ; 0000 019C PORTD |= (1 << BUTTON_A) | (1 << BUTTON_B) | (1 << BUTTON_C) | (1 << BUTTON_D);
0001db b16b      	IN   R22,11
0001dc e0e0      	LDI  R30,0
0001dd 994b      	SBIC 0x9,3
0001de e0e1      	LDI  R30,1
0001df e0a1      	LDI  R26,LOW(1)
0001e0 d24a      	RCALL __LSLB12
0001e1 2e1e      	MOV  R1,R30
0001e2 e0e0      	LDI  R30,0
0001e3 9935      	SBIC 0x6,5
0001e4 e0e1      	LDI  R30,1
0001e5 d245      	RCALL __LSLB12
0001e6 2a1e      	OR   R1,R30
0001e7 e0e0      	LDI  R30,0
0001e8 9934      	SBIC 0x6,4
0001e9 e0e1      	LDI  R30,1
0001ea d240      	RCALL __LSLB12
0001eb 2a1e      	OR   R1,R30
0001ec e0e0      	LDI  R30,0
0001ed 9933      	SBIC 0x6,3
0001ee e0e1      	LDI  R30,1
0001ef d23b      	RCALL __LSLB12
0001f0 29e1      	OR   R30,R1
0001f1 2be6      	OR   R30,R22
0001f2 b9eb      	OUT  0xB,R30
                 ; 0000 019D 
                 ; 0000 019E TIMSK1 &= ~(1 << OCIE1A);
0001f3 91e0 006f 	LDS  R30,111
0001f5 7fed      	ANDI R30,0xFD
0001f6 93e0 006f 	STS  111,R30
                 ; 0000 019F mode = 0;
0001f8 e0e0      	LDI  R30,LOW(0)
0001f9 d172      	RCALL SUBOPT_0x7
                 ; 0000 01A0 aturJam();
0001fa d08d      	RCALL _aturJam
                 ; 0000 01A1 while (1)
                 _0xB2:
                 ; 0000 01A2 {
                 ; 0000 01A3 }
0001fb cfff      	RJMP _0xB2
                 ; 0000 01A4 }
                 _0xB5:
0001fc cfff      	RJMP _0xB5
                 ; .FEND
                 ;void init_int1(void)
                 ; 0000 01A8 {                        // 1s
                 _init_int1:
                 ; .FSTART _init_int1
                 ; 0000 01A9 TCCR1A = (1 << WGM12); // ctc
0001fd e0e8      	LDI  R30,LOW(8)
0001fe 93e0 0080 	STS  128,R30
                 ; 0000 01AA TCCR1B = (1 << CS12);  // 256
000200 e0e4      	LDI  R30,LOW(4)
000201 93e0 0081 	STS  129,R30
                 ; 0000 01AB TCNT1H = 0;
000203 e0e0      	LDI  R30,LOW(0)
000204 93e0 0085 	STS  133,R30
                 ; 0000 01AC TCNT1L = 0;
000206 93e0 0084 	STS  132,R30
                 ; 0000 01AD OCR1AH = 0xF4;
000208 efe4      	LDI  R30,LOW(244)
000209 93e0 0089 	STS  137,R30
                 ; 0000 01AE OCR1AL = 0x24;
00020b e2e4      	LDI  R30,LOW(36)
00020c 93e0 0088 	STS  136,R30
                 ; 0000 01AF TIMSK1 = 0b00000010;
00020e e0e2      	LDI  R30,LOW(2)
00020f 93e0 006f 	STS  111,R30
                 ; 0000 01B0 }
000211 9508      	RET
                 ; .FEND
                 ;void init_int2(void)
                 ; 0000 01B4 {
                 _init_int2:
                 ; .FSTART _init_int2
                 ; 0000 01B5 TIMSK0 = 0b00000001;
000212 e0e1      	LDI  R30,LOW(1)
000213 93e0 006e 	STS  110,R30
                 ; 0000 01B6 TCCR0B = (1 << CS02); // mengatur pre-scaler 256
000215 e0e4      	LDI  R30,LOW(4)
000216 bde5      	OUT  0x25,R30
                 ; 0000 01B7 TCNT0 = 0x83;
000217 e8e3      	LDI  R30,LOW(131)
000218 bde6      	OUT  0x26,R30
                 ; 0000 01B8 }
000219 9508      	RET
                 ; .FEND
                 ;void init_buttonA(void)
                 ; 0000 01BB {
                 _init_buttonA:
                 ; .FSTART _init_buttonA
                 ; 0000 01BC // SET FALLING EDGE PADA INT1
                 ; 0000 01BD EICRA = (1 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
00021a e0e8      	LDI  R30,LOW(8)
00021b 93e0 0069 	STS  105,R30
                 ; 0000 01BE // ENABLE INT1
                 ; 0000 01BF EIMSK = (1 << INT1) | (0 << INT0);
00021d e0e2      	LDI  R30,LOW(2)
00021e bbed      	OUT  0x1D,R30
                 ; 0000 01C0 }
00021f 9508      	RET
                 ; .FEND
                 ;void SevenSegment(int num)
                 ; 0000 01C3 {
                 _SevenSegment:
                 ; .FSTART _SevenSegment
                 ; 0000 01C4 // Elif for number modifier Seven Segments
                 ; 0000 01C5 if (num == 0)
000220 931a      	ST   -Y,R17
000221 930a      	ST   -Y,R16
000222 018d      	MOVW R16,R26
                 ;	num -> R16,R17
000223 2e00      	MOV  R0,R16
000224 2a01      	OR   R0,R17
000225 f429      	BRNE _0xB6
                 ; 0000 01C6 {
                 ; 0000 01C7 SEG_A = 0;
000226 d1d9      	RCALL SUBOPT_0x1E
                 ; 0000 01C8 SEG_B = 0;
                 ; 0000 01C9 SEG_C = 0;
                 ; 0000 01CA SEG_D = 0;
                 ; 0000 01CB SEG_E = 0;
000227 9841      	CBI  0x8,1
                 ; 0000 01CC SEG_F = 0;
000228 985c      	CBI  0xB,4
                 ; 0000 01CD SEG_G = 1;
000229 9a40      	SBI  0x8,0
                 ; 0000 01CE }
                 ; 0000 01CF else if (num == 1)
00022a c05a      	RJMP _0xC5
                 _0xB6:
00022b e0e1      	LDI  R30,LOW(1)
00022c e0f0      	LDI  R31,HIGH(1)
00022d 17e0      	CP   R30,R16
00022e 07f1      	CPC  R31,R17
00022f f429      	BRNE _0xC6
                 ; 0000 01D0 {
                 ; 0000 01D1 SEG_A = 1;
000230 d1d4      	RCALL SUBOPT_0x1F
                 ; 0000 01D2 SEG_B = 0;
                 ; 0000 01D3 SEG_C = 0;
                 ; 0000 01D4 SEG_D = 1;
                 ; 0000 01D5 SEG_E = 1;
000231 9a41      	SBI  0x8,1
                 ; 0000 01D6 SEG_F = 1;
000232 9a5c      	SBI  0xB,4
                 ; 0000 01D7 SEG_G = 1;
000233 9a40      	SBI  0x8,0
                 ; 0000 01D8 }
                 ; 0000 01D9 else if (num == 2)
000234 c050      	RJMP _0xD5
                 _0xC6:
000235 e0e2      	LDI  R30,LOW(2)
000236 e0f0      	LDI  R31,HIGH(2)
000237 17e0      	CP   R30,R16
000238 07f1      	CPC  R31,R17
000239 f439      	BRNE _0xD6
                 ; 0000 01DA {
                 ; 0000 01DB SEG_A = 0;
00023a 9828      	CBI  0x5,0
                 ; 0000 01DC SEG_B = 0;
00023b 985e      	CBI  0xB,6
                 ; 0000 01DD SEG_C = 1;
00023c 9a5f      	SBI  0xB,7
                 ; 0000 01DE SEG_D = 0;
00023d 9829      	CBI  0x5,1
                 ; 0000 01DF SEG_E = 0;
00023e 9841      	CBI  0x8,1
                 ; 0000 01E0 SEG_F = 1;
00023f 9a5c      	SBI  0xB,4
                 ; 0000 01E1 SEG_G = 0;
000240 c043      	RJMP _0x182
                 ; 0000 01E2 }
                 ; 0000 01E3 else if (num == 3)
                 _0xD6:
000241 e0e3      	LDI  R30,LOW(3)
000242 e0f0      	LDI  R31,HIGH(3)
000243 17e0      	CP   R30,R16
000244 07f1      	CPC  R31,R17
000245 f421      	BRNE _0xE6
                 ; 0000 01E4 {
                 ; 0000 01E5 SEG_A = 0;
000246 d1b9      	RCALL SUBOPT_0x1E
                 ; 0000 01E6 SEG_B = 0;
                 ; 0000 01E7 SEG_C = 0;
                 ; 0000 01E8 SEG_D = 0;
                 ; 0000 01E9 SEG_E = 1;
000247 9a41      	SBI  0x8,1
                 ; 0000 01EA SEG_F = 1;
000248 9a5c      	SBI  0xB,4
                 ; 0000 01EB SEG_G = 0;
000249 c03a      	RJMP _0x182
                 ; 0000 01EC }
                 ; 0000 01ED else if (num == 4)
                 _0xE6:
00024a e0e4      	LDI  R30,LOW(4)
00024b e0f0      	LDI  R31,HIGH(4)
00024c 17e0      	CP   R30,R16
00024d 07f1      	CPC  R31,R17
00024e f411      	BRNE _0xF6
                 ; 0000 01EE {
                 ; 0000 01EF SEG_A = 1;
00024f d1b5      	RCALL SUBOPT_0x1F
                 ; 0000 01F0 SEG_B = 0;
                 ; 0000 01F1 SEG_C = 0;
                 ; 0000 01F2 SEG_D = 1;
                 ; 0000 01F3 SEG_E = 1;
000250 c031      	RJMP _0x183
                 ; 0000 01F4 SEG_F = 0;
                 ; 0000 01F5 SEG_G = 0;
                 ; 0000 01F6 }
                 ; 0000 01F7 else if (num == 5)
                 _0xF6:
000251 e0e5      	LDI  R30,LOW(5)
000252 e0f0      	LDI  R31,HIGH(5)
000253 17e0      	CP   R30,R16
000254 07f1      	CPC  R31,R17
000255 f419      	BRNE _0x106
                 ; 0000 01F8 {
                 ; 0000 01F9 SEG_A = 0;
000256 9828      	CBI  0x5,0
                 ; 0000 01FA SEG_B = 1;
000257 9a5e      	SBI  0xB,6
                 ; 0000 01FB SEG_C = 0;
000258 c027      	RJMP _0x184
                 ; 0000 01FC SEG_D = 0;
                 ; 0000 01FD SEG_E = 1;
                 ; 0000 01FE SEG_F = 0;
                 ; 0000 01FF SEG_G = 0;
                 ; 0000 0200 }
                 ; 0000 0201 else if (num == 6)
                 _0x106:
000259 e0e6      	LDI  R30,LOW(6)
00025a e0f0      	LDI  R31,HIGH(6)
00025b 17e0      	CP   R30,R16
00025c 07f1      	CPC  R31,R17
00025d f431      	BRNE _0x116
                 ; 0000 0202 {
                 ; 0000 0203 SEG_A = 0;
00025e 9828      	CBI  0x5,0
                 ; 0000 0204 SEG_B = 1;
00025f 9a5e      	SBI  0xB,6
                 ; 0000 0205 SEG_C = 0;
000260 985f      	CBI  0xB,7
                 ; 0000 0206 SEG_D = 0;
000261 9829      	CBI  0x5,1
                 ; 0000 0207 SEG_E = 0;
000262 9841      	CBI  0x8,1
                 ; 0000 0208 SEG_F = 0;
000263 c01f      	RJMP _0x185
                 ; 0000 0209 SEG_G = 0;
                 ; 0000 020A }
                 ; 0000 020B else if (num == 7)
                 _0x116:
000264 e0e7      	LDI  R30,LOW(7)
000265 e0f0      	LDI  R31,HIGH(7)
000266 17e0      	CP   R30,R16
000267 07f1      	CPC  R31,R17
000268 f441      	BRNE _0x126
                 ; 0000 020C {
                 ; 0000 020D SEG_A = 0;
000269 9828      	CBI  0x5,0
                 ; 0000 020E SEG_B = 0;
00026a 985e      	CBI  0xB,6
                 ; 0000 020F SEG_C = 0;
00026b 985f      	CBI  0xB,7
                 ; 0000 0210 SEG_D = 1;
00026c 9a29      	SBI  0x5,1
                 ; 0000 0211 SEG_E = 1;
00026d 9a41      	SBI  0x8,1
                 ; 0000 0212 SEG_F = 1;
00026e 9a5c      	SBI  0xB,4
                 ; 0000 0213 SEG_G = 1;
00026f 9a40      	SBI  0x8,0
                 ; 0000 0214 }
                 ; 0000 0215 else if (num == 8)
000270 c014      	RJMP _0x135
                 _0x126:
000271 e0e8      	LDI  R30,LOW(8)
000272 e0f0      	LDI  R31,HIGH(8)
000273 17e0      	CP   R30,R16
000274 07f1      	CPC  R31,R17
000275 f419      	BRNE _0x136
                 ; 0000 0216 {
                 ; 0000 0217 SEG_A = 0;
000276 d189      	RCALL SUBOPT_0x1E
                 ; 0000 0218 SEG_B = 0;
                 ; 0000 0219 SEG_C = 0;
                 ; 0000 021A SEG_D = 0;
                 ; 0000 021B SEG_E = 0;
000277 9841      	CBI  0x8,1
                 ; 0000 021C SEG_F = 0;
000278 c00a      	RJMP _0x185
                 ; 0000 021D SEG_G = 0;
                 ; 0000 021E }
                 ; 0000 021F else if (num == 9)
                 _0x136:
000279 e0e9      	LDI  R30,LOW(9)
00027a e0f0      	LDI  R31,HIGH(9)
00027b 17e0      	CP   R30,R16
00027c 07f1      	CPC  R31,R17
00027d f439      	BRNE _0x146
                 ; 0000 0220 {
                 ; 0000 0221 SEG_A = 0;
00027e 9828      	CBI  0x5,0
                 ; 0000 0222 SEG_B = 0;
00027f 985e      	CBI  0xB,6
                 ; 0000 0223 SEG_C = 0;
                 _0x184:
000280 985f      	CBI  0xB,7
                 ; 0000 0224 SEG_D = 0;
000281 9829      	CBI  0x5,1
                 ; 0000 0225 SEG_E = 1;
                 _0x183:
000282 9a41      	SBI  0x8,1
                 ; 0000 0226 SEG_F = 0;
                 _0x185:
000283 985c      	CBI  0xB,4
                 ; 0000 0227 SEG_G = 0;
                 _0x182:
000284 9840      	CBI  0x8,0
                 ; 0000 0228 }
                 ; 0000 0229 }
                 _0x146:
                 _0x135:
                 _0xD5:
                 _0xC5:
000285 9109      	LD   R16,Y+
000286 9119      	LD   R17,Y+
000287 9508      	RET
                 ; .FEND
                 ;void aturJam(void)
                 ; 0000 022C {
                 _aturJam:
                 ; .FSTART _aturJam
                 ; 0000 022D #asm("sei")
000288 9478      	SEI
                 ; 0000 022E atur = 0;
000289 d0dc      	RCALL SUBOPT_0x6
                 ; 0000 022F start = 0;
00028a 93e0 0310 	STS  _start,R30
00028c 93e0 0311 	STS  _start+1,R30
                 ; 0000 0230 while (!(EIFR & (1 << INTF1)))
                 _0x155:
00028e 99e1      	SBIC 0x1C,1
00028f c057      	RJMP _0x157
                 ; 0000 0231 { // menunggu sampai interrupt ditekan
                 ; 0000 0232 if (BUTTON_D == 1)
000290 9b33      	SBIS 0x6,3
000291 c019      	RJMP _0x158
                 ; 0000 0233 {
                 ; 0000 0234 delay_ms(300);
000292 d177      	RCALL SUBOPT_0x20
                 ; 0000 0235 if (geser == 0)
000293 f471      	BRNE _0x159
                 ; 0000 0236 {
                 ; 0000 0237 seconds_jam++;
                +
000294 2de3     +MOV R30 , R3
000295 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
000296 9631      	ADIW R30,1
                +
000297 2e3e     +MOV R3 , R30
000298 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
000299 9731      	SBIW R30,1
                 ; 0000 0238 if (seconds_jam >= 60)
00029a e3ec      	LDI  R30,LOW(60)
00029b e0f0      	LDI  R31,HIGH(60)
00029c 163e      	CP   R3,R30
00029d 064f      	CPC  R4,R31
00029e f014      	BRLT _0x15A
                 ; 0000 0239 {
                 ; 0000 023A seconds_jam = 0;
00029f 2433      	CLR  R3
0002a0 2444      	CLR  R4
                 ; 0000 023B }
                 ; 0000 023C }
                 _0x15A:
                 ; 0000 023D else
0002a1 c008      	RJMP _0x15B
                 _0x159:
                 ; 0000 023E {
                 ; 0000 023F minutes_jam++;
0002a2 e0e1      	LDI  R30,LOW(1)
0002a3 e0f0      	LDI  R31,HIGH(1)
                +
0002a4 0e5e     +ADD R5 , R30
0002a5 1e6f     +ADC R6 , R31
                 	__ADDWRR 5,6,30,31
                 ; 0000 0240 if (minutes_jam >= 60)
0002a6 d0e0      	RCALL SUBOPT_0xB
0002a7 f014      	BRLT _0x15C
                 ; 0000 0241 {
                 ; 0000 0242 minutes_jam = 0;
0002a8 2455      	CLR  R5
0002a9 2466      	CLR  R6
                 ; 0000 0243 }
                 ; 0000 0244 }
                 _0x15C:
                 _0x15B:
                 ; 0000 0245 }
                 ; 0000 0246 else if (BUTTON_C == 1)
0002aa c033      	RJMP _0x15D
                 _0x158:
0002ab 9b34      	SBIS 0x6,4
0002ac c021      	RJMP _0x15E
                 ; 0000 0247 {
                 ; 0000 0248 delay_ms(300);
0002ad d15c      	RCALL SUBOPT_0x20
                 ; 0000 0249 if (geser == 0)
0002ae f481      	BRNE _0x15F
                 ; 0000 024A {
                 ; 0000 024B seconds_jam--;
                +
0002af 2de3     +MOV R30 , R3
0002b0 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0002b1 9731      	SBIW R30,1
                +
0002b2 2e3e     +MOV R3 , R30
0002b3 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
0002b4 9631      	ADIW R30,1
                 ; 0000 024C if (seconds_jam <= -1)
0002b5 efef      	LDI  R30,LOW(65535)
0002b6 efff      	LDI  R31,HIGH(65535)
0002b7 15e3      	CP   R30,R3
0002b8 05f4      	CPC  R31,R4
0002b9 f024      	BRLT _0x160
                 ; 0000 024D {
                 ; 0000 024E seconds_jam = 59;
0002ba e3eb      	LDI  R30,LOW(59)
0002bb e0f0      	LDI  R31,HIGH(59)
                +
0002bc 2e3e     +MOV R3 , R30
0002bd 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 024F }
                 ; 0000 0250 }
                 _0x160:
                 ; 0000 0251 else
0002be c00e      	RJMP _0x161
                 _0x15F:
                 ; 0000 0252 {
                 ; 0000 0253 minutes_jam--;
                +
0002bf 2de5     +MOV R30 , R5
0002c0 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
0002c1 9731      	SBIW R30,1
                +
0002c2 2e5e     +MOV R5 , R30
0002c3 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 0254 if (minutes_jam <= -1)
0002c4 efef      	LDI  R30,LOW(65535)
0002c5 efff      	LDI  R31,HIGH(65535)
0002c6 15e5      	CP   R30,R5
0002c7 05f6      	CPC  R31,R6
0002c8 f024      	BRLT _0x162
                 ; 0000 0255 {
                 ; 0000 0256 minutes_jam = 59;
0002c9 e3eb      	LDI  R30,LOW(59)
0002ca e0f0      	LDI  R31,HIGH(59)
                +
0002cb 2e5e     +MOV R5 , R30
0002cc 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 0257 }
                 ; 0000 0258 }
                 _0x162:
                 _0x161:
                 ; 0000 0259 }
                 ; 0000 025A else if (BUTTON_B == 1)
0002cd c010      	RJMP _0x163
                 _0x15E:
0002ce 9b35      	SBIS 0x6,5
0002cf c00e      	RJMP _0x164
                 ; 0000 025B {
                 ; 0000 025C delay_ms(300);
0002d0 d139      	RCALL SUBOPT_0x20
                 ; 0000 025D if (geser == 0)
0002d1 f439      	BRNE _0x165
                 ; 0000 025E {
                 ; 0000 025F geser = 1;
0002d2 e0e1      	LDI  R30,LOW(1)
0002d3 e0f0      	LDI  R31,HIGH(1)
0002d4 93e0 030c 	STS  _geser,R30
0002d6 93f0 030d 	STS  _geser+1,R31
                 ; 0000 0260 }
                 ; 0000 0261 else
0002d8 c005      	RJMP _0x166
                 _0x165:
                 ; 0000 0262 {
                 ; 0000 0263 geser = 0;
0002d9 e0e0      	LDI  R30,LOW(0)
0002da 93e0 030c 	STS  _geser,R30
0002dc 93e0 030d 	STS  _geser+1,R30
                 ; 0000 0264 }
                 _0x166:
                 ; 0000 0265 }
                 ; 0000 0266 // Update Digit Values
                 ; 0000 0267 digits[0] = minutes_jam / 10;
                 _0x164:
                 _0x163:
                 _0x15D:
0002de d0ad      	RCALL SUBOPT_0xC
0002df d0b1      	RCALL SUBOPT_0xD
                 ; 0000 0268 digits[1] = minutes_jam % 10;
0002e0 d0ab      	RCALL SUBOPT_0xC
0002e1 d0b5      	RCALL SUBOPT_0xE
                 ; 0000 0269 digits[2] = seconds_jam / 10;
0002e2 d0ba      	RCALL SUBOPT_0xF
                 ; 0000 026A digits[3] = seconds_jam % 10;
0002e3 e0ea      	LDI  R30,LOW(10)
0002e4 e0f0      	LDI  R31,HIGH(10)
0002e5 d0e5      	RCALL SUBOPT_0x14
                 ; 0000 026B }
0002e6 cfa7      	RJMP _0x155
                 _0x157:
                 ; 0000 026C atur = 1;
0002e7 d05f      	RCALL SUBOPT_0x1
                 ; 0000 026D // Clear the external interrupt flag
                 ; 0000 026E EIFR &= (0 << INTF1);
0002e8 c04c      	RJMP _0x2000001
                 ; 0000 026F 
                 ; 0000 0270 // Return from function
                 ; 0000 0271 return;
                 ; 0000 0272 }
                 ; .FEND
                 ;void stopWatch(void)
                 ; 0000 0275 {
                 _stopWatch:
                 ; .FSTART _stopWatch
                 ; 0000 0276 #asm("sei")
0002e9 9478      	SEI
                 ; 0000 0277 seconds_stopwatch = 0;
0002ea d128      	RCALL SUBOPT_0x21
                 ; 0000 0278 minutes_stopwatch = 0;
                 ; 0000 0279 start = 0;
0002eb d085      	RCALL SUBOPT_0x8
                 ; 0000 027A 
                 ; 0000 027B while (!(EIFR & (1 << INTF1)))
                 _0x167:
0002ec 99e1      	SBIC 0x1C,1
0002ed c015      	RJMP _0x169
                 ; 0000 027C {                    // menunggu sampai interrupt ditekan
                 ; 0000 027D if (BUTTON_D == 1) // start
0002ee 9b33      	SBIS 0x6,3
0002ef c002      	RJMP _0x16A
                 ; 0000 027E {
                 ; 0000 027F delay_ms(300);
0002f0 d127      	RCALL SUBOPT_0x22
                 ; 0000 0280 start = 1;
                 ; 0000 0281 }
                 ; 0000 0282 else if (BUTTON_C == 1) // pause
0002f1 c008      	RJMP _0x16B
                 _0x16A:
0002f2 9b34      	SBIS 0x6,4
0002f3 c002      	RJMP _0x16C
                 ; 0000 0283 {
                 ; 0000 0284 delay_ms(300);
0002f4 d127      	RCALL SUBOPT_0x23
                 ; 0000 0285 start = 0;
                 ; 0000 0286 }
                 ; 0000 0287 else if (BUTTON_B == 1)
0002f5 c004      	RJMP _0x16D
                 _0x16C:
0002f6 9b35      	SBIS 0x6,5
0002f7 c002      	RJMP _0x16E
                 ; 0000 0288 { // pause and reset
                 ; 0000 0289 delay_ms(300);
0002f8 d123      	RCALL SUBOPT_0x23
                 ; 0000 028A start = 0;
                 ; 0000 028B seconds_stopwatch = 0;
0002f9 d119      	RCALL SUBOPT_0x21
                 ; 0000 028C minutes_stopwatch = 0;
                 ; 0000 028D }
                 ; 0000 028E // Update Digit Values
                 ; 0000 028F digits[0] = minutes_stopwatch / 10;
                 _0x16E:
                 _0x16D:
                 _0x16B:
0002fa d0bf      	RCALL SUBOPT_0x12
0002fb d095      	RCALL SUBOPT_0xD
                 ; 0000 0290 digits[1] = minutes_stopwatch % 10;
0002fc d0bd      	RCALL SUBOPT_0x12
0002fd d099      	RCALL SUBOPT_0xE
                 ; 0000 0291 digits[2] = seconds_stopwatch / 10;
0002fe d0c0      	RCALL SUBOPT_0x13
                 ; 0000 0292 digits[3] = seconds_stopwatch % 10;
0002ff e0ea      	LDI  R30,LOW(10)
000300 e0f0      	LDI  R31,HIGH(10)
000301 d0c9      	RCALL SUBOPT_0x14
                 ; 0000 0293 }
000302 cfe9      	RJMP _0x167
                 _0x169:
                 ; 0000 0294 
                 ; 0000 0295 // Clear the external interrupt flag
                 ; 0000 0296 EIFR &= (0 << INTF1);
000303 c031      	RJMP _0x2000001
                 ; 0000 0297 
                 ; 0000 0298 // Return from function
                 ; 0000 0299 return;
                 ; 0000 029A }
                 ; .FEND
                 ;void alarmTimer(void)
                 ; 0000 029D {
                 _alarmTimer:
                 ; .FSTART _alarmTimer
                 ; 0000 029E #asm("sei")
000304 9478      	SEI
                 ; 0000 029F start = 0;
000305 d06b      	RCALL SUBOPT_0x8
                 ; 0000 02A0 seconds_timer = 0;
000306 2477      	CLR  R7
000307 2488      	CLR  R8
                 ; 0000 02A1 minutes_timer = 0;
000308 2499      	CLR  R9
000309 24aa      	CLR  R10
                 ; 0000 02A2 while (!(EIFR & (1 << INTF1)))
                 _0x16F:
00030a 99e1      	SBIC 0x1C,1
00030b c025      	RJMP _0x171
                 ; 0000 02A3 { // menunggu sampai interrupt ditekan
                 ; 0000 02A4 if (BUTTON_D == 1)
00030c 9b33      	SBIS 0x6,3
00030d c00b      	RJMP _0x172
                 ; 0000 02A5 {
                 ; 0000 02A6 delay_ms(300);
00030e d111      	RCALL SUBOPT_0x24
                 ; 0000 02A7 PIN_BUZZ = 0;
                 ; 0000 02A8 seconds_timer++;
                +
00030f 0e7e     +ADD R7 , R30
000310 1e8f     +ADC R8 , R31
                 	__ADDWRR 7,8,30,31
                 ; 0000 02A9 if (seconds_timer >= 60)
000311 e3ec      	LDI  R30,LOW(60)
000312 e0f0      	LDI  R31,HIGH(60)
000313 167e      	CP   R7,R30
000314 068f      	CPC  R8,R31
000315 f014      	BRLT _0x175
                 ; 0000 02AA {
                 ; 0000 02AB seconds_timer = 0;
000316 2477      	CLR  R7
000317 2488      	CLR  R8
                 ; 0000 02AC }
                 ; 0000 02AD }
                 _0x175:
                 ; 0000 02AE else if (BUTTON_C == 1)
000318 c00f      	RJMP _0x176
                 _0x172:
000319 9b34      	SBIS 0x6,4
00031a c00b      	RJMP _0x177
                 ; 0000 02AF {
                 ; 0000 02B0 delay_ms(300);
00031b d104      	RCALL SUBOPT_0x24
                 ; 0000 02B1 PIN_BUZZ = 0;
                 ; 0000 02B2 minutes_timer++;
                +
00031c 0e9e     +ADD R9 , R30
00031d 1eaf     +ADC R10 , R31
                 	__ADDWRR 9,10,30,31
                 ; 0000 02B3 if (minutes_timer >= 60)
00031e e3ec      	LDI  R30,LOW(60)
00031f e0f0      	LDI  R31,HIGH(60)
000320 169e      	CP   R9,R30
000321 06af      	CPC  R10,R31
000322 f014      	BRLT _0x17A
                 ; 0000 02B4 {
                 ; 0000 02B5 minutes_timer = 0;
000323 2499      	CLR  R9
000324 24aa      	CLR  R10
                 ; 0000 02B6 }
                 ; 0000 02B7 }
                 _0x17A:
                 ; 0000 02B8 else if (BUTTON_B == 1)
000325 c002      	RJMP _0x17B
                 _0x177:
000326 9935      	SBIC 0x6,5
                 ; 0000 02B9 {
                 ; 0000 02BA delay_ms(300);
000327 d0f0      	RCALL SUBOPT_0x22
                 ; 0000 02BB start = 1;
                 ; 0000 02BC }
                 ; 0000 02BD // Update Digit Values
                 ; 0000 02BE digits[0] = minutes_timer / 10;
                 _0x17B:
                 _0x176:
000328 d080      	RCALL SUBOPT_0x10
000329 d067      	RCALL SUBOPT_0xD
                 ; 0000 02BF digits[1] = minutes_timer % 10;
00032a d07e      	RCALL SUBOPT_0x10
00032b d06b      	RCALL SUBOPT_0xE
                 ; 0000 02C0 digits[2] = seconds_timer / 10;
00032c d081      	RCALL SUBOPT_0x11
                 ; 0000 02C1 digits[3] = seconds_timer % 10;
00032d e0ea      	LDI  R30,LOW(10)
00032e e0f0      	LDI  R31,HIGH(10)
00032f d09b      	RCALL SUBOPT_0x14
                 ; 0000 02C2 }
000330 cfd9      	RJMP _0x16F
                 _0x171:
                 ; 0000 02C3 // Clear the external interrupt flag
                 ; 0000 02C4 EIFR &= (0 << INTF1);
000331 c003      	RJMP _0x2000001
                 ; 0000 02C5 
                 ; 0000 02C6 // Return from function
                 ; 0000 02C7 return;
                 ; 0000 02C8 }
                 ; .FEND
                 ;void tampilanJam(void)
                 ; 0000 02CB {
                 _tampilanJam:
                 ; .FSTART _tampilanJam
                 ; 0000 02CC #asm("sei")
000332 9478      	SEI
                 ; 0000 02CD 
                 ; 0000 02CE while (!(EIFR & (1 << INTF1)))
                 _0x17D:
000333 9be1      	SBIS 0x1C,1
                 ; 0000 02CF { // menunggu sampai interrupt ditekan
                 ; 0000 02D0 }
000334 cffe      	RJMP _0x17D
                 ; 0000 02D1 
                 ; 0000 02D2 // Clear the external interrupt flag
                 ; 0000 02D3 EIFR &= (0 << INTF1);
                 _0x2000001:
000335 b3ec      	IN   R30,0x1C
000336 70e0      	ANDI R30,LOW(0x0)
000337 bbec      	OUT  0x1C,R30
                 ; 0000 02D4 
                 ; 0000 02D5 // Return from function
                 ; 0000 02D6 return;
000338 9508      	RET
                 ; 0000 02D7 }
                 ; .FEND
                 
                 	.DSEG
                 _digits:
000300           	.BYTE 0x8
                 _digit_index:
000308           	.BYTE 0x2
                 _atur:
00030a           	.BYTE 0x2
                 _geser:
00030c           	.BYTE 0x2
                 _mode:
00030e           	.BYTE 0x2
                 _start:
000310           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
000339 920a      	ST   -Y,R0
00033a 921a      	ST   -Y,R1
00033b 92fa      	ST   -Y,R15
00033c 936a      	ST   -Y,R22
00033d 937a      	ST   -Y,R23
00033e 938a      	ST   -Y,R24
00033f 939a      	ST   -Y,R25
000340 93aa      	ST   -Y,R26
000341 93ba      	ST   -Y,R27
000342 93ea      	ST   -Y,R30
000343 93fa      	ST   -Y,R31
000344 b7ef      	IN   R30,SREG
000345 93ea      	ST   -Y,R30
000346 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000347 e0e1      	LDI  R30,LOW(1)
000348 e0f0      	LDI  R31,HIGH(1)
000349 93e0 030a 	STS  _atur,R30
00034b 93f0 030b 	STS  _atur+1,R31
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00034e 93e0 030e 	STS  _mode,R30
000350 93f0 030f 	STS  _mode+1,R31
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3:
000353 e0e1      	LDI  R30,LOW(1)
000354 e0f0      	LDI  R31,HIGH(1)
000355 93e0 0310 	STS  _start,R30
000357 93f0 0311 	STS  _start+1,R31
000359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x4:
00035a 91a0 030e 	LDS  R26,_mode
00035c 91b0 030f 	LDS  R27,_mode+1
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00035f dfee      	RCALL SUBOPT_0x2
000360 e0e0      	LDI  R30,LOW(0)
000361 93e0 0310 	STS  _start,R30
000363 93e0 0311 	STS  _start+1,R30
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000366 e0e0      	LDI  R30,LOW(0)
000367 93e0 030a 	STS  _atur,R30
000369 93e0 030b 	STS  _atur+1,R30
00036b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00036c 93e0 030e 	STS  _mode,R30
00036e 93e0 030f 	STS  _mode+1,R30
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x8:
000371 e0e0      	LDI  R30,LOW(0)
000372 93e0 0310 	STS  _start,R30
000374 93e0 0311 	STS  _start+1,R30
000376 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
000377 e0e1      	LDI  R30,LOW(1)
000378 e0f0      	LDI  R31,HIGH(1)
                +
000379 0e3e     +ADD R3 , R30
00037a 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
00037b e3ec      	LDI  R30,LOW(60)
00037c e0f0      	LDI  R31,HIGH(60)
00037d 163e      	CP   R3,R30
00037e 064f      	CPC  R4,R31
00037f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000380 2433      	CLR  R3
000381 2444      	CLR  R4
000382 e0e1      	LDI  R30,LOW(1)
000383 e0f0      	LDI  R31,HIGH(1)
                +
000384 0e5e     +ADD R5 , R30
000385 1e6f     +ADC R6 , R31
                 	__ADDWRR 5,6,30,31
000386 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xB:
000387 e3ec      	LDI  R30,LOW(60)
000388 e0f0      	LDI  R31,HIGH(60)
000389 165e      	CP   R5,R30
00038a 066f      	CPC  R6,R31
00038b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
                +
00038c 2da5     +MOV R26 , R5
00038d 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
00038e e0ea      	LDI  R30,LOW(10)
00038f e0f0      	LDI  R31,HIGH(10)
000390 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0xD:
000391 d0b4      	RCALL __DIVW21
000392 93e0 0300 	STS  _digits,R30
000394 93f0 0301 	STS  _digits+1,R31
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0xE:
000397 d0b3      	RCALL __MODW21
                +
000398 93e0 0302+STS _digits + ( 2 ) , R30
00039a 93f0 0303+STS _digits + ( 2 ) + 1 , R31
                 	__PUTW1MN _digits,2
00039c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xF:
                +
00039d 2da3     +MOV R26 , R3
00039e 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
00039f e0ea      	LDI  R30,LOW(10)
0003a0 e0f0      	LDI  R31,HIGH(10)
0003a1 d0a4      	RCALL __DIVW21
                +
0003a2 93e0 0304+STS _digits + ( 4 ) , R30
0003a4 93f0 0305+STS _digits + ( 4 ) + 1 , R31
                 	__PUTW1MN _digits,4
                +
0003a6 2da3     +MOV R26 , R3
0003a7 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
0003a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
                +
0003a9 2da9     +MOV R26 , R9
0003aa 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
0003ab e0ea      	LDI  R30,LOW(10)
0003ac e0f0      	LDI  R31,HIGH(10)
0003ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x11:
                +
0003ae 2da7     +MOV R26 , R7
0003af 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
0003b0 e0ea      	LDI  R30,LOW(10)
0003b1 e0f0      	LDI  R31,HIGH(10)
0003b2 d093      	RCALL __DIVW21
                +
0003b3 93e0 0304+STS _digits + ( 4 ) , R30
0003b5 93f0 0305+STS _digits + ( 4 ) + 1 , R31
                 	__PUTW1MN _digits,4
                +
0003b7 2da7     +MOV R26 , R7
0003b8 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x12:
                +
0003ba 2dad     +MOV R26 , R13
0003bb 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
0003bc e0ea      	LDI  R30,LOW(10)
0003bd e0f0      	LDI  R31,HIGH(10)
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x13:
                +
0003bf 2dab     +MOV R26 , R11
0003c0 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
0003c1 e0ea      	LDI  R30,LOW(10)
0003c2 e0f0      	LDI  R31,HIGH(10)
0003c3 d082      	RCALL __DIVW21
                +
0003c4 93e0 0304+STS _digits + ( 4 ) , R30
0003c6 93f0 0305+STS _digits + ( 4 ) + 1 , R31
                 	__PUTW1MN _digits,4
                +
0003c8 2dab     +MOV R26 , R11
0003c9 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
0003ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
0003cb d07f      	RCALL __MODW21
                +
0003cc 93e0 0306+STS _digits + ( 6 ) , R30
0003ce 93f0 0307+STS _digits + ( 6 ) + 1 , R31
                 	__PUTW1MN _digits,6
0003d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0003d1 91e0 0308 	LDS  R30,_digit_index
0003d3 91f0 0309 	LDS  R31,_digit_index+1
0003d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0003d6 9a2d      	SBI  0x5,5
0003d7 982b      	CBI  0x5,3
0003d8 982c      	CBI  0x5,4
0003d9 982a      	CBI  0x5,2
0003da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x17:
0003db 91a0 0308 	LDS  R26,_digit_index
0003dd 91b0 0309 	LDS  R27,_digit_index+1
0003df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0003e0 982d      	CBI  0x5,5
0003e1 9a2b      	SBI  0x5,3
0003e2 982c      	CBI  0x5,4
0003e3 982a      	CBI  0x5,2
0003e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0003e5 982d      	CBI  0x5,5
0003e6 982b      	CBI  0x5,3
0003e7 9a2c      	SBI  0x5,4
0003e8 982a      	CBI  0x5,2
0003e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0003ea 982d      	CBI  0x5,5
0003eb 982b      	CBI  0x5,3
0003ec 982c      	CBI  0x5,4
0003ed 9a2a      	SBI  0x5,2
0003ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1B:
0003ef 91a0 030c 	LDS  R26,_geser
0003f1 91b0 030d 	LDS  R27,_geser+1
0003f3 9711      	SBIW R26,1
0003f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
0003f5 982d      	CBI  0x5,5
0003f6 982b      	CBI  0x5,3
0003f7 982c      	CBI  0x5,4
0003f8 982a      	CBI  0x5,2
0003f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1D:
0003fa 91a0 030c 	LDS  R26,_geser
0003fc 91b0 030d 	LDS  R27,_geser+1
0003fe 9710      	SBIW R26,0
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
000400 9828      	CBI  0x5,0
000401 985e      	CBI  0xB,6
000402 985f      	CBI  0xB,7
000403 9829      	CBI  0x5,1
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000405 9a28      	SBI  0x5,0
000406 985e      	CBI  0xB,6
000407 985f      	CBI  0xB,7
000408 9a29      	SBI  0x5,1
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x20:
00040a e2ac      	LDI  R26,LOW(300)
00040b e0b1      	LDI  R27,HIGH(300)
00040c d05a      	RCALL _delay_ms
00040d 91e0 030c 	LDS  R30,_geser
00040f 91f0 030d 	LDS  R31,_geser+1
000411 9730      	SBIW R30,0
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000413 24bb      	CLR  R11
000414 24cc      	CLR  R12
000415 24dd      	CLR  R13
000416 24ee      	CLR  R14
000417 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000418 e2ac      	LDI  R26,LOW(300)
000419 e0b1      	LDI  R27,HIGH(300)
00041a d04c      	RCALL _delay_ms
00041b cf37      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
00041c e2ac      	LDI  R26,LOW(300)
00041d e0b1      	LDI  R27,HIGH(300)
00041e d048      	RCALL _delay_ms
00041f cf51      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000420 e2ac      	LDI  R26,LOW(300)
000421 e0b1      	LDI  R27,HIGH(300)
000422 d044      	RCALL _delay_ms
000423 985a      	CBI  0xB,2
000424 e0e1      	LDI  R30,LOW(1)
000425 e0f0      	LDI  R31,HIGH(1)
000426 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
000427 95f1      	NEG  R31
000428 95e1      	NEG  R30
000429 40f0      	SBCI R31,0
00042a 9508      	RET
                 
                 __LSLB12:
00042b 23ee      	TST  R30
00042c 2e0e      	MOV  R0,R30
00042d 2fea      	MOV  R30,R26
00042e f019      	BREQ __LSLB12R
                 __LSLB12L:
00042f 0fee      	LSL  R30
000430 940a      	DEC  R0
000431 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000432 9508      	RET
                 
                 __DIVW21U:
000433 2400      	CLR  R0
000434 2411      	CLR  R1
000435 e190      	LDI  R25,16
                 __DIVW21U1:
000436 0faa      	LSL  R26
000437 1fbb      	ROL  R27
000438 1c00      	ROL  R0
000439 1c11      	ROL  R1
00043a 1a0e      	SUB  R0,R30
00043b 0a1f      	SBC  R1,R31
00043c f418      	BRCC __DIVW21U2
00043d 0e0e      	ADD  R0,R30
00043e 1e1f      	ADC  R1,R31
00043f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000440 60a1      	SBR  R26,1
                 __DIVW21U3:
000441 959a      	DEC  R25
000442 f799      	BRNE __DIVW21U1
000443 01fd      	MOVW R30,R26
000444 01d0      	MOVW R26,R0
000445 9508      	RET
                 
                 __DIVW21:
000446 d012      	RCALL __CHKSIGNW
000447 dfeb      	RCALL __DIVW21U
000448 f40e      	BRTC __DIVW211
000449 dfdd      	RCALL __ANEGW1
                 __DIVW211:
00044a 9508      	RET
                 
                 __MODW21:
00044b 94e8      	CLT
00044c ffb7      	SBRS R27,7
00044d c004      	RJMP __MODW211
00044e 95b1      	NEG  R27
00044f 95a1      	NEG  R26
000450 40b0      	SBCI R27,0
000451 9468      	SET
                 __MODW211:
000452 fdf7      	SBRC R31,7
000453 dfd3      	RCALL __ANEGW1
000454 dfde      	RCALL __DIVW21U
000455 01fd      	MOVW R30,R26
000456 f40e      	BRTC __MODW212
000457 dfcf      	RCALL __ANEGW1
                 __MODW212:
000458 9508      	RET
                 
                 __CHKSIGNW:
000459 94e8      	CLT
00045a fff7      	SBRS R31,7
00045b c002      	RJMP __CHKSW1
00045c dfca      	RCALL __ANEGW1
00045d 9468      	SET
                 __CHKSW1:
00045e ffb7      	SBRS R27,7
00045f c006      	RJMP __CHKSW2
000460 95b1      	NEG  R27
000461 95a1      	NEG  R26
000462 40b0      	SBCI R27,0
000463 f800      	BLD  R0,0
000464 9403      	INC  R0
000465 fa00      	BST  R0,0
                 __CHKSW2:
000466 9508      	RET
                 
                 _delay_ms:
000467 9610      	adiw r26,0
000468 f039      	breq __delay_ms1
                 __delay_ms0:
000469 95a8      	wdr
                +
00046a ea80     +LDI R24 , LOW ( 0xFA0 )
00046b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00046c 9701     +SBIW R24 , 1
00046d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00046e 9711      	sbiw r26,1
00046f f7c9      	brne __delay_ms0
                 __delay_ms1:
000470 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  26 r1 :  13 r2 :   0 r3 :  13 r4 :  13 r5 :  13 r6 :  13 r7 :  11 
r8 :  11 r9 :  10 r10:  10 r11:   6 r12:   6 r13:   5 r14:   5 r15:   2 
r16:  13 r17:  12 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   2 
r24:  11 r25:   9 r26:  67 r27:  37 r28:   1 r29:   1 r30: 229 r31: 117 
x  :   9 y  :  44 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :   9 
adiw  :   4 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :  19 brmi  :   0 brne  :  43 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  46 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  38 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :  22 cpc   :  22 cpi   :   0 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  27 ld    :  26 ldd   :   0 ldi   : 150 
lds   :  20 lpm   :   7 lsl   :   3 lsr   :   0 mov   :  48 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   5 
ori   :   3 out   :  17 pop   :   0 push  :   0 rcall : 166 ret   :  47 
reti  :   2 rjmp  :  74 rol   :   4 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  22 sbic  :   8 sbis  :   9 sbiw  :  37 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   5 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   0 sts   :  45 sub   :   1 subi  :   0 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008e2   2238     36   2274   32768   6.9%
[.dseg] 0x000100 0x000312      0     18     18    2048   0.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
