;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void init_int1(void)
; 0000 0019 {                        // 1s

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A TCCR1A = (1 << WGM12); // ctc
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001B TCCR1B = (1 << CS12);  // 256
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001C TCNT1H = 0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001D TCNT1L = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001E OCR1AH = 0xF4;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001F OCR1AL = 0x24;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0020 TIMSK1 = 0b00000010;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0021 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;void init_int2(void)
; 0000 0024 { // 1ms
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0025 TIMSK0 = 0b00000001;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0026 TCCR0B = (1 << CS02); // 256
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0027 TCNT0 = 0x83;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0028 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;void init_buttonA(void)
; 0000 002B {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002C // SET FALLING EDGE PADA INT1
; 0000 002D EICRA = (1 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002E // ENABLE INT1
; 0000 002F EIMSK = (1 << INT1) | (0 << INT0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0030 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;void SevenSegment(int num)
; 0000 0034 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0035 // Elif for number modifier Seven Segments
; 0000 0036 if (num == 0)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;	num -> R16,R17
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0037 {
; 0000 0038 SEG_A = 0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0039 SEG_B = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003A SEG_C = 0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003B SEG_D = 0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003C SEG_E = 0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003D SEG_F = 0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 003E SEG_G = 1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003F }
; 0000 0040 else if (num == 1)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0041 {
; 0000 0042 SEG_A = 1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0043 SEG_B = 0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0044 SEG_C = 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0045 SEG_D = 1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0046 SEG_E = 1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0047 SEG_F = 1;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0048 SEG_G = 1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0049 }
; 0000 004A else if (num == 2)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004B {
; 0000 004C SEG_A = 0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004D SEG_B = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004E SEG_C = 1;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004F SEG_D = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0050 SEG_E = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0051 SEG_F = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0052 SEG_G = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0053 }
; 0000 0054 else if (num == 3)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0055 {
; 0000 0056 SEG_A = 0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0057 SEG_B = 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0058 SEG_C = 0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0059 SEG_D = 0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005A SEG_E = 1;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 005B SEG_F = 1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005C SEG_G = 0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005D }
; 0000 005E else if (num == 4)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 005F {
; 0000 0060 SEG_A = 1;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0061 SEG_B = 0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0062 SEG_C = 0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0063 SEG_D = 1;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0064 SEG_E = 1;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0065 SEG_F = 0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0066 SEG_G = 0;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0067 }
; 0000 0068 else if (num == 5)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0069 {
; 0000 006A SEG_A = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006B SEG_B = 1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 006C SEG_C = 0;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 006D SEG_D = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 006E SEG_E = 1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 006F SEG_F = 0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0070 SEG_G = 0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0071 }
; 0000 0072 else if (num == 6)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0073 {
; 0000 0074 SEG_A = 0;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0075 SEG_B = 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0076 SEG_C = 0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0077 SEG_D = 0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0078 SEG_E = 0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0079 SEG_F = 0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 007A SEG_G = 0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 007B }
; 0000 007C else if (num == 7)
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 007D {
; 0000 007E SEG_A = 0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 007F SEG_B = 0;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0080 SEG_C = 0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0081 SEG_D = 1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0082 SEG_E = 1;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0083 SEG_F = 1;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0084 SEG_G = 1;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0085 }
; 0000 0086 else if (num == 8)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0087 {
; 0000 0088 SEG_A = 0;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0089 SEG_B = 0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 008A SEG_C = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 008B SEG_D = 0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 008C SEG_E = 0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 008D SEG_F = 0;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008E SEG_G = 0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 008F }
; 0000 0090 else if (num == 9)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0091 {
; 0000 0092 SEG_A = 0;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0093 SEG_B = 0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0094 SEG_C = 0;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0095 SEG_D = 0;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0096 SEG_E = 1;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0097 SEG_F = 0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0098 SEG_G = 0;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0099 }
; 0000 009A }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0

	.DSEG
;void aturJam(void)
; 0000 00AD {

	.CSEG
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00AE #asm("sei")
;PCODE: $00000100 VOL: 0
; 0000 00AF atur = 0;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B0 TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00B1 while (!(EIFR & (1 << INTF1)))
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00B2 { // menunggu sampai interrupt ditekan
; 0000 00B3 if (BUTTON_D == 1)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00B4 {
; 0000 00B5 delay_ms(300);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B6 if (geser == 0)
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B7 {
; 0000 00B8 seconds_jam++;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B9 if (seconds_jam >= 60)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00BA {
; 0000 00BB seconds_jam = 0;
;PCODE: $00000119 VOL: 0
; 0000 00BC }
; 0000 00BD }
;PCODE: $0000011A VOL: 0
; 0000 00BE else
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00BF {
; 0000 00C0 minutes_jam++;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00C1 if (minutes_jam >= 60)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00C2 {
; 0000 00C3 minutes_jam = 0;
;PCODE: $00000123 VOL: 0
; 0000 00C4 }
; 0000 00C5 }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00C6 }
; 0000 00C7 else if (BUTTON_C == 1)
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C8 {
; 0000 00C9 delay_ms(300);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00CA if (geser == 0)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CB {
; 0000 00CC seconds_jam--;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00CD if (seconds_jam <= -1)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00CE {
; 0000 00CF seconds_jam = 59;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D0 }
; 0000 00D1 }
;PCODE: $00000139 VOL: 0
; 0000 00D2 else
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00D3 {
; 0000 00D4 minutes_jam--;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00D5 if (minutes_jam <= -1)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00D6 {
; 0000 00D7 minutes_jam = 59;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00D8 }
; 0000 00D9 }
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00DA }
; 0000 00DB else if (BUTTON_B == 1)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00DC {
; 0000 00DD delay_ms(300);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00DE if (geser == 0)
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00DF {
; 0000 00E0 geser = 1;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00E1 }
; 0000 00E2 else
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00E3 {
; 0000 00E4 geser = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00E5 }
;PCODE: $00000156 VOL: 0
; 0000 00E6 }
; 0000 00E7 // Update Digit Values
; 0000 00E8 digits[0] = minutes_jam / 10;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00E9 digits[1] = minutes_jam % 10;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00EA digits[2] = seconds_jam / 10;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00EB digits[3] = seconds_jam % 10;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00EC }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00ED atur = 1;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00EE // Clear the external interrupt flag
; 0000 00EF EIFR &= (0 << INTF1);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00F0 
; 0000 00F1 // Return from function
; 0000 00F2 return;
;PCODE: $00000174 VOL: 0
; 0000 00F3 }
;PCODE: $00000175 VOL: 0
;void stopWatch(void)
; 0000 00F6 {
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00F7 #asm("sei")
;PCODE: $00000178 VOL: 0
; 0000 00F8 seconds_stopwatch = 0;
;PCODE: $00000179 VOL: 0
; 0000 00F9 minutes_stopwatch = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00FA TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00FB 
; 0000 00FC while (!(EIFR & (1 << INTF1)))
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00FD {                    // menunggu sampai interrupt ditekan
; 0000 00FE if (BUTTON_D == 1) // start
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00FF {
; 0000 0100 delay_ms(300);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0101 TIMSK1 |= (1 << OCIE1A);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0102 }
; 0000 0103 else if (BUTTON_C == 1) // pause
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0104 {
; 0000 0105 delay_ms(300);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0106 TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0107 }
; 0000 0108 else if (BUTTON_B == 1)
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0109 { // pause and reset
; 0000 010A delay_ms(300);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 010B TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 010C seconds_stopwatch = 0;
;PCODE: $0000019F VOL: 0
; 0000 010D minutes_stopwatch = 0;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 010E }
; 0000 010F // Update Digit Values
; 0000 0110 digits[0] = minutes_stopwatch / 10;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0111 digits[1] = minutes_stopwatch % 10;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0112 digits[2] = seconds_stopwatch / 10;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0113 digits[3] = seconds_stopwatch % 10;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0114 }
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0115 
; 0000 0116 // Clear the external interrupt flag
; 0000 0117 EIFR &= (0 << INTF1);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0118 
; 0000 0119 // Return from function
; 0000 011A return;
;PCODE: $000001BD VOL: 0
; 0000 011B }
;PCODE: $000001BE VOL: 0
;void alarmTimer(void)
; 0000 011F {
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0120 #asm("sei")
;PCODE: $000001C1 VOL: 0
; 0000 0121 start = 0;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0122 TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0123 seconds_timer = 0;
;PCODE: $000001C7 VOL: 0
; 0000 0124 minutes_timer = 0;
;PCODE: $000001C8 VOL: 0
; 0000 0125 while (!(EIFR & (1 << INTF1)))
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0126 { // menunggu sampai interrupt ditekan
; 0000 0127 if (BUTTON_D == 1)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0128 {
; 0000 0129 delay_ms(300);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 012A seconds_timer++;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 012B if (seconds_timer >= 60)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 012C {
; 0000 012D seconds_timer = 0;
;PCODE: $000001D9 VOL: 0
; 0000 012E }
; 0000 012F }
;PCODE: $000001DA VOL: 0
; 0000 0130 else if (BUTTON_C == 1)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0131 {
; 0000 0132 delay_ms(300);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0133 minutes_timer++;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0134 if (minutes_timer >= 60)
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0135 {
; 0000 0136 minutes_timer = 0;
;PCODE: $000001E9 VOL: 0
; 0000 0137 }
; 0000 0138 }
;PCODE: $000001EA VOL: 0
; 0000 0139 else if (BUTTON_B == 1)
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 013A {
; 0000 013B delay_ms(300);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 013C TIMSK1 |= (1 << OCIE1A);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 013D start = 1;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 013E }
; 0000 013F // Update Digit Values
; 0000 0140 digits[0] = minutes_timer / 10;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0141 digits[1] = minutes_timer % 10;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0142 digits[2] = seconds_timer / 10;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0143 digits[3] = seconds_timer % 10;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0144 if (minutes_timer == 0 && seconds_timer == 0 && start == 1)
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0145 {
; 0000 0146 PIN_BUZZ = 1;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0147 }
; 0000 0148 }
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0149 // Clear the external interrupt flag
; 0000 014A EIFR &= (0 << INTF1);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 014B 
; 0000 014C // Return from function
; 0000 014D return;
;PCODE: $00000220 VOL: 0
; 0000 014E }
;PCODE: $00000221 VOL: 0
;void tampilanJam(void)
; 0000 0151 {
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0152 #asm("sei")
;PCODE: $00000224 VOL: 0
; 0000 0153 
; 0000 0154 while (!(EIFR & (1 << INTF1)))
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0155 { // menunggu sampai interrupt ditekan
; 0000 0156 }
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0157 
; 0000 0158 // Clear the external interrupt flag
; 0000 0159 EIFR &= (0 << INTF1);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 015A 
; 0000 015B // Return from function
; 0000 015C return;
;PCODE: $0000022E VOL: 0
; 0000 015D }
;PCODE: $0000022F VOL: 0
;interrupt[3] void ext_int1_isr(void)
; 0000 0161 {
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0162 PIN_BUZZ = 0;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0163 delay_ms(300);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0164 if (mode == 1)
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0165 { // mode stopwatch
; 0000 0166 atur = 1;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0167 mode = 2;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0168 TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0169 stopWatch();
;PCODE: $00000240 VOL: 0
; 0000 016A }
; 0000 016B else if (mode == 0)
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 016C { // mode tampilan
; 0000 016D atur = 1;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 016E mode = 1;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 016F TIMSK1 |= (1 << OCIE1A); // 256
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0170 tampilanJam();
;PCODE: $0000024C VOL: 0
; 0000 0171 }
; 0000 0172 else if (mode == 2)
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0173 { // mode timer
; 0000 0174 atur = 1;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0175 mode = 0;
;PCODE: $00000254 VOL: 0
; 0000 0176 TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0177 alarmTimer();
;PCODE: $00000258 VOL: 0
; 0000 0178 }
; 0000 0179 /*else if (mode == 0)
; 0000 017A {           //mode mengatur
; 0000 017B mode = 1;
; 0000 017C TIMSK1 &= ~(1 << OCIE1A);
; 0000 017D aturJam();
; 0000 017E }  */
; 0000 017F }
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;interrupt[12] void timera_compa_isr(void)
; 0000 0183 {
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0184 if (mode == 1)
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0185 {
; 0000 0186 // Check if 1 Second has Passed
; 0000 0187 seconds_jam++;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0188 
; 0000 0189 // Check if 1 Minute has Passed
; 0000 018A if (seconds_jam >= 60)
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 018B {
; 0000 018C seconds_jam = 0;
;PCODE: $0000026A VOL: 0
; 0000 018D minutes_jam++;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 018E }
; 0000 018F if (minutes_jam >= 60)
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0190 {
; 0000 0191 minutes_jam = 0;
;PCODE: $00000272 VOL: 0
; 0000 0192 }
; 0000 0193 // Update Digit Values
; 0000 0194 digits[0] = minutes_jam / 10;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0195 digits[1] = minutes_jam % 10;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 0196 digits[2] = seconds_jam / 10;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0197 digits[3] = seconds_jam % 10;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0198 }
; 0000 0199 else if(mode == 0)
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 019A {
; 0000 019B // Check if 1 Second has Passed
; 0000 019C seconds_timer--;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 019D seconds_jam++;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 019E 
; 0000 019F // Check if 1 Minute has Passed
; 0000 01A0 if (seconds_jam >= 60)
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01A1 {
; 0000 01A2 seconds_jam = 0;
;PCODE: $00000294 VOL: 0
; 0000 01A3 minutes_jam++;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01A4 }
; 0000 01A5 if (minutes_jam >= 60)
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 01A6 {
; 0000 01A7 minutes_jam = 0;
;PCODE: $0000029C VOL: 0
; 0000 01A8 }
; 0000 01A9 
; 0000 01AA // Check if 1 Minute has Passed
; 0000 01AB if (seconds_timer == 0 && minutes_timer == 0)
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 01AC { // timer sudah mencapai 0
; 0000 01AD TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 01AE }
; 0000 01AF if (seconds_timer <= -1)
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01B0 {
; 0000 01B1 seconds_timer = 59;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01B2 minutes_timer--;
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01B3 }
; 0000 01B4 if (minutes_timer <= -1)
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01B5 {
; 0000 01B6 minutes_timer = 0;
;PCODE: $000002B6 VOL: 0
; 0000 01B7 }
; 0000 01B8 // Update Digit Values
; 0000 01B9 digits[0] = minutes_timer / 10;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01BA digits[1] = minutes_timer % 10;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01BB digits[2] = seconds_timer / 10;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01BC digits[3] = seconds_timer % 10;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01BD }
; 0000 01BE else if (mode == 2)
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01BF {
; 0000 01C0 // Check if 1 Second has Passed
; 0000 01C1 seconds_stopwatch++;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01C2 seconds_jam++;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01C3 
; 0000 01C4 // Check if 1 Minute has Passed
; 0000 01C5 if (seconds_jam >= 60)
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01C6 {
; 0000 01C7 seconds_jam = 0;
;PCODE: $000002D9 VOL: 0
; 0000 01C8 minutes_jam++;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 01C9 }
; 0000 01CA if (minutes_jam >= 60)
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 01CB {
; 0000 01CC minutes_jam = 0;
;PCODE: $000002E1 VOL: 0
; 0000 01CD }
; 0000 01CE // Check if 1 Minute has Passed
; 0000 01CF if (seconds_stopwatch >= 60)
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01D0 {
; 0000 01D1 seconds_stopwatch = 0;
;PCODE: $000002E6 VOL: 0
; 0000 01D2 minutes_stopwatch++;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 01D3 }
; 0000 01D4 if (minutes_stopwatch >= 60)
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01D5 {
; 0000 01D6 minutes_stopwatch = 00;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 01D7 }
; 0000 01D8 // Update Digit Values
; 0000 01D9 digits[0] = minutes_stopwatch / 10;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 01DA digits[1] = minutes_stopwatch % 10;
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01DB digits[2] = seconds_stopwatch / 10;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 01DC digits[3] = seconds_stopwatch % 10;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 01DD }
; 0000 01DE }
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;interrupt[17] void timer0_ovf_isr(void)
; 0000 01E2 {
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01E3 // Update Segment Values for Current Digit
; 0000 01E4 SevenSegment(digits[digit_index]);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 01E5 
; 0000 01E6 // Enable Multiplexing for Current Digit
; 0000 01E7 // Elif for choose seven SevenSegmen
; 0000 01E8 if (atur == 1)
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01E9 {
; 0000 01EA if (digit_index == 0)
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 01EB {
; 0000 01EC DIGIT_1 = 1;
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 01ED DIGIT_2 = 0;
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 01EE DIGIT_3 = 0;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 01EF DIGIT_4 = 0;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 01F0 }
; 0000 01F1 else if (digit_index == 1)
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01F2 {
; 0000 01F3 DIGIT_1 = 0;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01F4 DIGIT_2 = 1;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 01F5 DIGIT_3 = 0;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 01F6 DIGIT_4 = 0;
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01F7 }
; 0000 01F8 else if (digit_index == 2)
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 01F9 {
; 0000 01FA DIGIT_1 = 0;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 01FB DIGIT_2 = 0;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 01FC DIGIT_3 = 1;
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01FD DIGIT_4 = 0;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 01FE }
; 0000 01FF else if (digit_index == 3)
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 0200 {
; 0000 0201 DIGIT_1 = 0;
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0202 DIGIT_2 = 0;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0203 DIGIT_3 = 0;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0204 DIGIT_4 = 1;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0205 }
; 0000 0206 }
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0207 else
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0208 {
; 0000 0209 if (digit_index == 0 && geser == 1)
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 020A {
; 0000 020B DIGIT_1 = 1;
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 020C DIGIT_2 = 0;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 020D DIGIT_3 = 0;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 020E DIGIT_4 = 0;
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 020F }
; 0000 0210 else if (digit_index == 1 && geser == 1)
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 0211 {
; 0000 0212 DIGIT_1 = 0;
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0213 DIGIT_2 = 1;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 0214 DIGIT_3 = 0;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0215 DIGIT_4 = 0;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0216 }
; 0000 0217 else if (digit_index == 2 && geser == 1)
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 0218 {
; 0000 0219 DIGIT_1 = 0;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 021A DIGIT_2 = 0;
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 021B DIGIT_3 = 0;
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 021C DIGIT_4 = 0;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 021D }
; 0000 021E else if (digit_index == 3 && geser == 1)
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 021F {
; 0000 0220 DIGIT_1 = 0;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 0221 DIGIT_2 = 0;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 0222 DIGIT_3 = 0;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 0223 DIGIT_4 = 0;
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 0224 }
; 0000 0225 else if (digit_index == 0 && geser == 0)
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0226 {
; 0000 0227 DIGIT_1 = 0;
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 0228 DIGIT_2 = 0;
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 0229 DIGIT_3 = 0;
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 022A DIGIT_4 = 0;
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 022B }
; 0000 022C else if (digit_index == 1 && geser == 0)
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 022D {
; 0000 022E DIGIT_1 = 0;
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 022F DIGIT_2 = 0;
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0230 DIGIT_3 = 0;
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 0231 DIGIT_4 = 0;
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 0232 }
; 0000 0233 else if (digit_index == 2 && geser == 0)
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 0234 {
; 0000 0235 DIGIT_1 = 0;
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0236 DIGIT_2 = 0;
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0237 DIGIT_3 = 1;
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 0238 DIGIT_4 = 0;
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0239 }
; 0000 023A else if (digit_index == 3 && geser == 0)
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 023B {
; 0000 023C DIGIT_1 = 0;
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 023D DIGIT_2 = 0;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 023E DIGIT_3 = 0;
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 023F DIGIT_4 = 1;
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0240 }
; 0000 0241 }
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 0242 
; 0000 0243 // Increment Digit Index
; 0000 0244 digit_index++;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 0245 
; 0000 0246 // Wrap Around Digit Index
; 0000 0247 if (digit_index >= 4)
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 0248 {
; 0000 0249 digit_index = 0;
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 024A }
; 0000 024B }
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;void main(void)
; 0000 024E {
;PCODE: $00000403 VOL: 0
; 0000 024F // Initialize Timer1
; 0000 0250 // set prescaler 1024
; 0000 0251 init_int1();
;PCODE: $00000404 VOL: 0
; 0000 0252 init_int2();
;PCODE: $00000405 VOL: 0
; 0000 0253 init_buttonA();
;PCODE: $00000406 VOL: 0
; 0000 0254 
; 0000 0255 // Enable Interrupts
; 0000 0256 #asm("sei")
;PCODE: $00000407 VOL: 0
; 0000 0257 
; 0000 0258 // Set Seven Segment Pins as Output
; 0000 0259 DDRB = 0b111111;
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 025A DDRD &= ~(1 << DDD3);
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 025B DDRD |= (1 << DDD2) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 025C DDRC |= (1 << DDC0) | (1 << DDC1);
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 025D DDRC &= ~(1 << DDD5) & ~(1 << DDD4) & ~(1 << DDD3);
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 025E PORTD |= (1 << BUTTON_A) | (1 << BUTTON_B) | (1 << BUTTON_C) | (1 << BUTTON_D);
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 025F 
; 0000 0260 TIMSK1 &= ~(1 << OCIE1A);
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 0261 mode = 0;
;PCODE: $00000432 VOL: 0
; 0000 0262 aturJam();
;PCODE: $00000433 VOL: 0
; 0000 0263 while (1)
;PCODE: $00000434 VOL: 0
; 0000 0264 {
; 0000 0265 }
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0266 }
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
